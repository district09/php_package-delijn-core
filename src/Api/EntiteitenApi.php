<?php
/**
 * EntiteitenApi
 * PHP version 7.4
 *
 * @category Class
 * @package  District09\DeLijnCoreAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * De Lijn Kern Open Data Services (v1)
 *
 * Dit document beschrijft de kern operaties van de Open Data API (v1)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace District09\DeLijnCoreAPI\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use District09\DeLijnCoreAPI\ApiException;
use District09\DeLijnCoreAPI\Configuration;
use District09\DeLijnCoreAPI\HeaderSelector;
use District09\DeLijnCoreAPI\ObjectSerializer;

/**
 * EntiteitenApi Class Doc Comment
 *
 * @category Class
 * @package  District09\DeLijnCoreAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class EntiteitenApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'geefEntiteit' => [
            'application/json',
        ],
        'geefEntiteiten' => [
            'application/json',
        ],
        'geefGemeentenVoorEntiteit' => [
            'application/json',
        ],
        'geefHaltesVoorEntiteit' => [
            'application/json',
        ],
        'geefLijnenVoorEntiteit' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation geefEntiteit
     *
     * geef een entiteit op basis van het opgegeven entiteitnummer
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefEntiteit'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \District09\DeLijnCoreAPI\Model\Entiteit
     */
    public function geefEntiteit($entiteitnummer, string $contentType = self::contentTypes['geefEntiteit'][0])
    {
        list($response) = $this->geefEntiteitWithHttpInfo($entiteitnummer, $contentType);
        return $response;
    }

    /**
     * Operation geefEntiteitWithHttpInfo
     *
     * geef een entiteit op basis van het opgegeven entiteitnummer
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefEntiteit'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \District09\DeLijnCoreAPI\Model\Entiteit, HTTP status code, HTTP response headers (array of strings)
     */
    public function geefEntiteitWithHttpInfo($entiteitnummer, string $contentType = self::contentTypes['geefEntiteit'][0])
    {
        $request = $this->geefEntiteitRequest($entiteitnummer, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\District09\DeLijnCoreAPI\Model\Entiteit' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\District09\DeLijnCoreAPI\Model\Entiteit' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\District09\DeLijnCoreAPI\Model\Entiteit', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\District09\DeLijnCoreAPI\Model\Entiteit';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\District09\DeLijnCoreAPI\Model\Entiteit',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation geefEntiteitAsync
     *
     * geef een entiteit op basis van het opgegeven entiteitnummer
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefEntiteit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefEntiteitAsync($entiteitnummer, string $contentType = self::contentTypes['geefEntiteit'][0])
    {
        return $this->geefEntiteitAsyncWithHttpInfo($entiteitnummer, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation geefEntiteitAsyncWithHttpInfo
     *
     * geef een entiteit op basis van het opgegeven entiteitnummer
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefEntiteit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefEntiteitAsyncWithHttpInfo($entiteitnummer, string $contentType = self::contentTypes['geefEntiteit'][0])
    {
        $returnType = '\District09\DeLijnCoreAPI\Model\Entiteit';
        $request = $this->geefEntiteitRequest($entiteitnummer, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'geefEntiteit'
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefEntiteit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function geefEntiteitRequest($entiteitnummer, string $contentType = self::contentTypes['geefEntiteit'][0])
    {

        // verify the required parameter 'entiteitnummer' is set
        if ($entiteitnummer === null || (is_array($entiteitnummer) && count($entiteitnummer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $entiteitnummer when calling geefEntiteit'
            );
        }


        $resourcePath = '/entiteiten/{entiteitnummer}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($entiteitnummer !== null) {
            $resourcePath = str_replace(
                '{' . 'entiteitnummer' . '}',
                ObjectSerializer::toPathValue($entiteitnummer),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Ocp-Apim-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation geefEntiteiten
     *
     * geef alle entiteiten
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefEntiteiten'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \District09\DeLijnCoreAPI\Model\Entiteiten
     */
    public function geefEntiteiten(string $contentType = self::contentTypes['geefEntiteiten'][0])
    {
        list($response) = $this->geefEntiteitenWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation geefEntiteitenWithHttpInfo
     *
     * geef alle entiteiten
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefEntiteiten'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \District09\DeLijnCoreAPI\Model\Entiteiten, HTTP status code, HTTP response headers (array of strings)
     */
    public function geefEntiteitenWithHttpInfo(string $contentType = self::contentTypes['geefEntiteiten'][0])
    {
        $request = $this->geefEntiteitenRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\District09\DeLijnCoreAPI\Model\Entiteiten' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\District09\DeLijnCoreAPI\Model\Entiteiten' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\District09\DeLijnCoreAPI\Model\Entiteiten', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\District09\DeLijnCoreAPI\Model\Entiteiten';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\District09\DeLijnCoreAPI\Model\Entiteiten',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation geefEntiteitenAsync
     *
     * geef alle entiteiten
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefEntiteiten'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefEntiteitenAsync(string $contentType = self::contentTypes['geefEntiteiten'][0])
    {
        return $this->geefEntiteitenAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation geefEntiteitenAsyncWithHttpInfo
     *
     * geef alle entiteiten
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefEntiteiten'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefEntiteitenAsyncWithHttpInfo(string $contentType = self::contentTypes['geefEntiteiten'][0])
    {
        $returnType = '\District09\DeLijnCoreAPI\Model\Entiteiten';
        $request = $this->geefEntiteitenRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'geefEntiteiten'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefEntiteiten'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function geefEntiteitenRequest(string $contentType = self::contentTypes['geefEntiteiten'][0])
    {


        $resourcePath = '/entiteiten';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Ocp-Apim-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation geefGemeentenVoorEntiteit
     *
     * geef alle gemeenten die beheerd worden door een entiteit
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefGemeentenVoorEntiteit'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \District09\DeLijnCoreAPI\Model\Gemeenten
     */
    public function geefGemeentenVoorEntiteit($entiteitnummer, string $contentType = self::contentTypes['geefGemeentenVoorEntiteit'][0])
    {
        list($response) = $this->geefGemeentenVoorEntiteitWithHttpInfo($entiteitnummer, $contentType);
        return $response;
    }

    /**
     * Operation geefGemeentenVoorEntiteitWithHttpInfo
     *
     * geef alle gemeenten die beheerd worden door een entiteit
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefGemeentenVoorEntiteit'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \District09\DeLijnCoreAPI\Model\Gemeenten, HTTP status code, HTTP response headers (array of strings)
     */
    public function geefGemeentenVoorEntiteitWithHttpInfo($entiteitnummer, string $contentType = self::contentTypes['geefGemeentenVoorEntiteit'][0])
    {
        $request = $this->geefGemeentenVoorEntiteitRequest($entiteitnummer, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\District09\DeLijnCoreAPI\Model\Gemeenten' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\District09\DeLijnCoreAPI\Model\Gemeenten' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\District09\DeLijnCoreAPI\Model\Gemeenten', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\District09\DeLijnCoreAPI\Model\Gemeenten';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\District09\DeLijnCoreAPI\Model\Gemeenten',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation geefGemeentenVoorEntiteitAsync
     *
     * geef alle gemeenten die beheerd worden door een entiteit
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefGemeentenVoorEntiteit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefGemeentenVoorEntiteitAsync($entiteitnummer, string $contentType = self::contentTypes['geefGemeentenVoorEntiteit'][0])
    {
        return $this->geefGemeentenVoorEntiteitAsyncWithHttpInfo($entiteitnummer, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation geefGemeentenVoorEntiteitAsyncWithHttpInfo
     *
     * geef alle gemeenten die beheerd worden door een entiteit
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefGemeentenVoorEntiteit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefGemeentenVoorEntiteitAsyncWithHttpInfo($entiteitnummer, string $contentType = self::contentTypes['geefGemeentenVoorEntiteit'][0])
    {
        $returnType = '\District09\DeLijnCoreAPI\Model\Gemeenten';
        $request = $this->geefGemeentenVoorEntiteitRequest($entiteitnummer, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'geefGemeentenVoorEntiteit'
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefGemeentenVoorEntiteit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function geefGemeentenVoorEntiteitRequest($entiteitnummer, string $contentType = self::contentTypes['geefGemeentenVoorEntiteit'][0])
    {

        // verify the required parameter 'entiteitnummer' is set
        if ($entiteitnummer === null || (is_array($entiteitnummer) && count($entiteitnummer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $entiteitnummer when calling geefGemeentenVoorEntiteit'
            );
        }


        $resourcePath = '/entiteiten/{entiteitnummer}/gemeenten';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($entiteitnummer !== null) {
            $resourcePath = str_replace(
                '{' . 'entiteitnummer' . '}',
                ObjectSerializer::toPathValue($entiteitnummer),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Ocp-Apim-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation geefHaltesVoorEntiteit
     *
     * geef alle haltes die beheerd worden door een entiteit
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefHaltesVoorEntiteit'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \District09\DeLijnCoreAPI\Model\Haltes
     */
    public function geefHaltesVoorEntiteit($entiteitnummer, string $contentType = self::contentTypes['geefHaltesVoorEntiteit'][0])
    {
        list($response) = $this->geefHaltesVoorEntiteitWithHttpInfo($entiteitnummer, $contentType);
        return $response;
    }

    /**
     * Operation geefHaltesVoorEntiteitWithHttpInfo
     *
     * geef alle haltes die beheerd worden door een entiteit
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefHaltesVoorEntiteit'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \District09\DeLijnCoreAPI\Model\Haltes, HTTP status code, HTTP response headers (array of strings)
     */
    public function geefHaltesVoorEntiteitWithHttpInfo($entiteitnummer, string $contentType = self::contentTypes['geefHaltesVoorEntiteit'][0])
    {
        $request = $this->geefHaltesVoorEntiteitRequest($entiteitnummer, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\District09\DeLijnCoreAPI\Model\Haltes' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\District09\DeLijnCoreAPI\Model\Haltes' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\District09\DeLijnCoreAPI\Model\Haltes', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\District09\DeLijnCoreAPI\Model\Haltes';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\District09\DeLijnCoreAPI\Model\Haltes',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation geefHaltesVoorEntiteitAsync
     *
     * geef alle haltes die beheerd worden door een entiteit
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefHaltesVoorEntiteit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefHaltesVoorEntiteitAsync($entiteitnummer, string $contentType = self::contentTypes['geefHaltesVoorEntiteit'][0])
    {
        return $this->geefHaltesVoorEntiteitAsyncWithHttpInfo($entiteitnummer, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation geefHaltesVoorEntiteitAsyncWithHttpInfo
     *
     * geef alle haltes die beheerd worden door een entiteit
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefHaltesVoorEntiteit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefHaltesVoorEntiteitAsyncWithHttpInfo($entiteitnummer, string $contentType = self::contentTypes['geefHaltesVoorEntiteit'][0])
    {
        $returnType = '\District09\DeLijnCoreAPI\Model\Haltes';
        $request = $this->geefHaltesVoorEntiteitRequest($entiteitnummer, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'geefHaltesVoorEntiteit'
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefHaltesVoorEntiteit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function geefHaltesVoorEntiteitRequest($entiteitnummer, string $contentType = self::contentTypes['geefHaltesVoorEntiteit'][0])
    {

        // verify the required parameter 'entiteitnummer' is set
        if ($entiteitnummer === null || (is_array($entiteitnummer) && count($entiteitnummer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $entiteitnummer when calling geefHaltesVoorEntiteit'
            );
        }


        $resourcePath = '/entiteiten/{entiteitnummer}/haltes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($entiteitnummer !== null) {
            $resourcePath = str_replace(
                '{' . 'entiteitnummer' . '}',
                ObjectSerializer::toPathValue($entiteitnummer),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Ocp-Apim-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation geefLijnenVoorEntiteit
     *
     * geef alle lijnen die beheerd worden door een entiteit
     *
     * @param  string $entiteitnummer nummer van de entiteit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefLijnenVoorEntiteit'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \District09\DeLijnCoreAPI\Model\Lijnen
     */
    public function geefLijnenVoorEntiteit($entiteitnummer, string $contentType = self::contentTypes['geefLijnenVoorEntiteit'][0])
    {
        list($response) = $this->geefLijnenVoorEntiteitWithHttpInfo($entiteitnummer, $contentType);
        return $response;
    }

    /**
     * Operation geefLijnenVoorEntiteitWithHttpInfo
     *
     * geef alle lijnen die beheerd worden door een entiteit
     *
     * @param  string $entiteitnummer nummer van de entiteit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefLijnenVoorEntiteit'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \District09\DeLijnCoreAPI\Model\Lijnen, HTTP status code, HTTP response headers (array of strings)
     */
    public function geefLijnenVoorEntiteitWithHttpInfo($entiteitnummer, string $contentType = self::contentTypes['geefLijnenVoorEntiteit'][0])
    {
        $request = $this->geefLijnenVoorEntiteitRequest($entiteitnummer, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\District09\DeLijnCoreAPI\Model\Lijnen' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\District09\DeLijnCoreAPI\Model\Lijnen' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\District09\DeLijnCoreAPI\Model\Lijnen', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\District09\DeLijnCoreAPI\Model\Lijnen';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\District09\DeLijnCoreAPI\Model\Lijnen',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation geefLijnenVoorEntiteitAsync
     *
     * geef alle lijnen die beheerd worden door een entiteit
     *
     * @param  string $entiteitnummer nummer van de entiteit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefLijnenVoorEntiteit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefLijnenVoorEntiteitAsync($entiteitnummer, string $contentType = self::contentTypes['geefLijnenVoorEntiteit'][0])
    {
        return $this->geefLijnenVoorEntiteitAsyncWithHttpInfo($entiteitnummer, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation geefLijnenVoorEntiteitAsyncWithHttpInfo
     *
     * geef alle lijnen die beheerd worden door een entiteit
     *
     * @param  string $entiteitnummer nummer van de entiteit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefLijnenVoorEntiteit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefLijnenVoorEntiteitAsyncWithHttpInfo($entiteitnummer, string $contentType = self::contentTypes['geefLijnenVoorEntiteit'][0])
    {
        $returnType = '\District09\DeLijnCoreAPI\Model\Lijnen';
        $request = $this->geefLijnenVoorEntiteitRequest($entiteitnummer, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'geefLijnenVoorEntiteit'
     *
     * @param  string $entiteitnummer nummer van de entiteit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefLijnenVoorEntiteit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function geefLijnenVoorEntiteitRequest($entiteitnummer, string $contentType = self::contentTypes['geefLijnenVoorEntiteit'][0])
    {

        // verify the required parameter 'entiteitnummer' is set
        if ($entiteitnummer === null || (is_array($entiteitnummer) && count($entiteitnummer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $entiteitnummer when calling geefLijnenVoorEntiteit'
            );
        }


        $resourcePath = '/entiteiten/{entiteitnummer}/lijnen';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($entiteitnummer !== null) {
            $resourcePath = str_replace(
                '{' . 'entiteitnummer' . '}',
                ObjectSerializer::toPathValue($entiteitnummer),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Ocp-Apim-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
