<?php
/**
 * LijnenApi
 * PHP version 7.4
 *
 * @category Class
 * @package  District09\DeLijnCoreAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * De Lijn Kern Open Data Services (v1)
 *
 * Dit document beschrijft de kern operaties van de Open Data API (v1)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace District09\DeLijnCoreAPI\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use District09\DeLijnCoreAPI\ApiException;
use District09\DeLijnCoreAPI\Configuration;
use District09\DeLijnCoreAPI\HeaderSelector;
use District09\DeLijnCoreAPI\ObjectSerializer;

/**
 * LijnenApi Class Doc Comment
 *
 * @category Class
 * @package  District09\DeLijnCoreAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class LijnenApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'geefDienstregelingVoorLijnrichting' => [
            'application/json',
        ],
        'geefDoorkomstVoorLijnrichting' => [
            'application/json',
        ],
        'geefGemeentenVoorLijn' => [
            'application/json',
        ],
        'geefGeplandeStoringenVoorLijnrichting' => [
            'application/json',
        ],
        'geefGeplandeStoringenVoorLijnrichtingenLijst' => [
            'application/json',
        ],
        'geefHaltesVoorLijnrichting' => [
            'application/json',
        ],
        'geefLijn' => [
            'application/json',
        ],
        'geefLijnLijst' => [
            'application/json',
        ],
        'geefLijnen' => [
            'application/json',
        ],
        'geefLijnkleur' => [
            'application/json',
        ],
        'geefLijnkleurLijst' => [
            'application/json',
        ],
        'geefLijnrichting' => [
            'application/json',
        ],
        'geefLijnrichtingen' => [
            'application/json',
        ],
        'geefLijnrichtingenLijst' => [
            'application/json',
        ],
        'geefOnGeplandeStoringenVoorLijnrichting' => [
            'application/json',
        ],
        'geefOnGeplandeStoringenVoorLijnrichtingenLijst' => [
            'application/json',
        ],
        'geefRitVoorLijnrichting' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation geefDienstregelingVoorLijnrichting
     *
     * geef de dienstregeling voor de opgegeven lijnrichting
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  int $lijnnummer Format - int32. nummer van de lijn (required)
     * @param  string $richting richting van de lijn (required)
     * @param  string $datum datum in formaat yyyy-MM-dd met als default waarde de huidige datum (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefDienstregelingVoorLijnrichting'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \District09\DeLijnCoreAPI\Model\Ritten
     */
    public function geefDienstregelingVoorLijnrichting($entiteitnummer, $lijnnummer, $richting, $datum = null, string $contentType = self::contentTypes['geefDienstregelingVoorLijnrichting'][0])
    {
        list($response) = $this->geefDienstregelingVoorLijnrichtingWithHttpInfo($entiteitnummer, $lijnnummer, $richting, $datum, $contentType);
        return $response;
    }

    /**
     * Operation geefDienstregelingVoorLijnrichtingWithHttpInfo
     *
     * geef de dienstregeling voor de opgegeven lijnrichting
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  int $lijnnummer Format - int32. nummer van de lijn (required)
     * @param  string $richting richting van de lijn (required)
     * @param  string $datum datum in formaat yyyy-MM-dd met als default waarde de huidige datum (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefDienstregelingVoorLijnrichting'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \District09\DeLijnCoreAPI\Model\Ritten, HTTP status code, HTTP response headers (array of strings)
     */
    public function geefDienstregelingVoorLijnrichtingWithHttpInfo($entiteitnummer, $lijnnummer, $richting, $datum = null, string $contentType = self::contentTypes['geefDienstregelingVoorLijnrichting'][0])
    {
        $request = $this->geefDienstregelingVoorLijnrichtingRequest($entiteitnummer, $lijnnummer, $richting, $datum, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\District09\DeLijnCoreAPI\Model\Ritten' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\District09\DeLijnCoreAPI\Model\Ritten' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\District09\DeLijnCoreAPI\Model\Ritten', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\District09\DeLijnCoreAPI\Model\Ritten';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\District09\DeLijnCoreAPI\Model\Ritten',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation geefDienstregelingVoorLijnrichtingAsync
     *
     * geef de dienstregeling voor de opgegeven lijnrichting
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  int $lijnnummer Format - int32. nummer van de lijn (required)
     * @param  string $richting richting van de lijn (required)
     * @param  string $datum datum in formaat yyyy-MM-dd met als default waarde de huidige datum (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefDienstregelingVoorLijnrichting'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefDienstregelingVoorLijnrichtingAsync($entiteitnummer, $lijnnummer, $richting, $datum = null, string $contentType = self::contentTypes['geefDienstregelingVoorLijnrichting'][0])
    {
        return $this->geefDienstregelingVoorLijnrichtingAsyncWithHttpInfo($entiteitnummer, $lijnnummer, $richting, $datum, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation geefDienstregelingVoorLijnrichtingAsyncWithHttpInfo
     *
     * geef de dienstregeling voor de opgegeven lijnrichting
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  int $lijnnummer Format - int32. nummer van de lijn (required)
     * @param  string $richting richting van de lijn (required)
     * @param  string $datum datum in formaat yyyy-MM-dd met als default waarde de huidige datum (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefDienstregelingVoorLijnrichting'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefDienstregelingVoorLijnrichtingAsyncWithHttpInfo($entiteitnummer, $lijnnummer, $richting, $datum = null, string $contentType = self::contentTypes['geefDienstregelingVoorLijnrichting'][0])
    {
        $returnType = '\District09\DeLijnCoreAPI\Model\Ritten';
        $request = $this->geefDienstregelingVoorLijnrichtingRequest($entiteitnummer, $lijnnummer, $richting, $datum, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'geefDienstregelingVoorLijnrichting'
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  int $lijnnummer Format - int32. nummer van de lijn (required)
     * @param  string $richting richting van de lijn (required)
     * @param  string $datum datum in formaat yyyy-MM-dd met als default waarde de huidige datum (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefDienstregelingVoorLijnrichting'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function geefDienstregelingVoorLijnrichtingRequest($entiteitnummer, $lijnnummer, $richting, $datum = null, string $contentType = self::contentTypes['geefDienstregelingVoorLijnrichting'][0])
    {

        // verify the required parameter 'entiteitnummer' is set
        if ($entiteitnummer === null || (is_array($entiteitnummer) && count($entiteitnummer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $entiteitnummer when calling geefDienstregelingVoorLijnrichting'
            );
        }

        // verify the required parameter 'lijnnummer' is set
        if ($lijnnummer === null || (is_array($lijnnummer) && count($lijnnummer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lijnnummer when calling geefDienstregelingVoorLijnrichting'
            );
        }

        // verify the required parameter 'richting' is set
        if ($richting === null || (is_array($richting) && count($richting) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $richting when calling geefDienstregelingVoorLijnrichting'
            );
        }



        $resourcePath = '/lijnen/{entiteitnummer}/{lijnnummer}/lijnrichtingen/{richting}/dienstregelingen';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datum,
            'datum', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($entiteitnummer !== null) {
            $resourcePath = str_replace(
                '{' . 'entiteitnummer' . '}',
                ObjectSerializer::toPathValue($entiteitnummer),
                $resourcePath
            );
        }
        // path params
        if ($lijnnummer !== null) {
            $resourcePath = str_replace(
                '{' . 'lijnnummer' . '}',
                ObjectSerializer::toPathValue($lijnnummer),
                $resourcePath
            );
        }
        // path params
        if ($richting !== null) {
            $resourcePath = str_replace(
                '{' . 'richting' . '}',
                ObjectSerializer::toPathValue($richting),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Ocp-Apim-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation geefDoorkomstVoorLijnrichting
     *
     * geef de real-time doorkomsten voor de opgegeven lijnrichting
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  int $lijnnummer Format - int32. nummer van de lijn (required)
     * @param  string $richting richting van de lijn (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefDoorkomstVoorLijnrichting'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \District09\DeLijnCoreAPI\Model\Ritten
     */
    public function geefDoorkomstVoorLijnrichting($entiteitnummer, $lijnnummer, $richting, string $contentType = self::contentTypes['geefDoorkomstVoorLijnrichting'][0])
    {
        list($response) = $this->geefDoorkomstVoorLijnrichtingWithHttpInfo($entiteitnummer, $lijnnummer, $richting, $contentType);
        return $response;
    }

    /**
     * Operation geefDoorkomstVoorLijnrichtingWithHttpInfo
     *
     * geef de real-time doorkomsten voor de opgegeven lijnrichting
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  int $lijnnummer Format - int32. nummer van de lijn (required)
     * @param  string $richting richting van de lijn (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefDoorkomstVoorLijnrichting'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \District09\DeLijnCoreAPI\Model\Ritten, HTTP status code, HTTP response headers (array of strings)
     */
    public function geefDoorkomstVoorLijnrichtingWithHttpInfo($entiteitnummer, $lijnnummer, $richting, string $contentType = self::contentTypes['geefDoorkomstVoorLijnrichting'][0])
    {
        $request = $this->geefDoorkomstVoorLijnrichtingRequest($entiteitnummer, $lijnnummer, $richting, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\District09\DeLijnCoreAPI\Model\Ritten' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\District09\DeLijnCoreAPI\Model\Ritten' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\District09\DeLijnCoreAPI\Model\Ritten', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\District09\DeLijnCoreAPI\Model\Ritten';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\District09\DeLijnCoreAPI\Model\Ritten',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation geefDoorkomstVoorLijnrichtingAsync
     *
     * geef de real-time doorkomsten voor de opgegeven lijnrichting
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  int $lijnnummer Format - int32. nummer van de lijn (required)
     * @param  string $richting richting van de lijn (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefDoorkomstVoorLijnrichting'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefDoorkomstVoorLijnrichtingAsync($entiteitnummer, $lijnnummer, $richting, string $contentType = self::contentTypes['geefDoorkomstVoorLijnrichting'][0])
    {
        return $this->geefDoorkomstVoorLijnrichtingAsyncWithHttpInfo($entiteitnummer, $lijnnummer, $richting, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation geefDoorkomstVoorLijnrichtingAsyncWithHttpInfo
     *
     * geef de real-time doorkomsten voor de opgegeven lijnrichting
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  int $lijnnummer Format - int32. nummer van de lijn (required)
     * @param  string $richting richting van de lijn (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefDoorkomstVoorLijnrichting'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefDoorkomstVoorLijnrichtingAsyncWithHttpInfo($entiteitnummer, $lijnnummer, $richting, string $contentType = self::contentTypes['geefDoorkomstVoorLijnrichting'][0])
    {
        $returnType = '\District09\DeLijnCoreAPI\Model\Ritten';
        $request = $this->geefDoorkomstVoorLijnrichtingRequest($entiteitnummer, $lijnnummer, $richting, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'geefDoorkomstVoorLijnrichting'
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  int $lijnnummer Format - int32. nummer van de lijn (required)
     * @param  string $richting richting van de lijn (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefDoorkomstVoorLijnrichting'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function geefDoorkomstVoorLijnrichtingRequest($entiteitnummer, $lijnnummer, $richting, string $contentType = self::contentTypes['geefDoorkomstVoorLijnrichting'][0])
    {

        // verify the required parameter 'entiteitnummer' is set
        if ($entiteitnummer === null || (is_array($entiteitnummer) && count($entiteitnummer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $entiteitnummer when calling geefDoorkomstVoorLijnrichting'
            );
        }

        // verify the required parameter 'lijnnummer' is set
        if ($lijnnummer === null || (is_array($lijnnummer) && count($lijnnummer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lijnnummer when calling geefDoorkomstVoorLijnrichting'
            );
        }

        // verify the required parameter 'richting' is set
        if ($richting === null || (is_array($richting) && count($richting) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $richting when calling geefDoorkomstVoorLijnrichting'
            );
        }


        $resourcePath = '/lijnen/{entiteitnummer}/{lijnnummer}/lijnrichtingen/{richting}/real-time';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($entiteitnummer !== null) {
            $resourcePath = str_replace(
                '{' . 'entiteitnummer' . '}',
                ObjectSerializer::toPathValue($entiteitnummer),
                $resourcePath
            );
        }
        // path params
        if ($lijnnummer !== null) {
            $resourcePath = str_replace(
                '{' . 'lijnnummer' . '}',
                ObjectSerializer::toPathValue($lijnnummer),
                $resourcePath
            );
        }
        // path params
        if ($richting !== null) {
            $resourcePath = str_replace(
                '{' . 'richting' . '}',
                ObjectSerializer::toPathValue($richting),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Ocp-Apim-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation geefGemeentenVoorLijn
     *
     * geef de gemeenten die bediend worden voor de opgegeven lijn
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  int $lijnnummer Format - int32. nummer van de lijn (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefGemeentenVoorLijn'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \District09\DeLijnCoreAPI\Model\Gemeenten
     */
    public function geefGemeentenVoorLijn($entiteitnummer, $lijnnummer, string $contentType = self::contentTypes['geefGemeentenVoorLijn'][0])
    {
        list($response) = $this->geefGemeentenVoorLijnWithHttpInfo($entiteitnummer, $lijnnummer, $contentType);
        return $response;
    }

    /**
     * Operation geefGemeentenVoorLijnWithHttpInfo
     *
     * geef de gemeenten die bediend worden voor de opgegeven lijn
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  int $lijnnummer Format - int32. nummer van de lijn (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefGemeentenVoorLijn'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \District09\DeLijnCoreAPI\Model\Gemeenten, HTTP status code, HTTP response headers (array of strings)
     */
    public function geefGemeentenVoorLijnWithHttpInfo($entiteitnummer, $lijnnummer, string $contentType = self::contentTypes['geefGemeentenVoorLijn'][0])
    {
        $request = $this->geefGemeentenVoorLijnRequest($entiteitnummer, $lijnnummer, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\District09\DeLijnCoreAPI\Model\Gemeenten' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\District09\DeLijnCoreAPI\Model\Gemeenten' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\District09\DeLijnCoreAPI\Model\Gemeenten', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\District09\DeLijnCoreAPI\Model\Gemeenten';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\District09\DeLijnCoreAPI\Model\Gemeenten',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation geefGemeentenVoorLijnAsync
     *
     * geef de gemeenten die bediend worden voor de opgegeven lijn
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  int $lijnnummer Format - int32. nummer van de lijn (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefGemeentenVoorLijn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefGemeentenVoorLijnAsync($entiteitnummer, $lijnnummer, string $contentType = self::contentTypes['geefGemeentenVoorLijn'][0])
    {
        return $this->geefGemeentenVoorLijnAsyncWithHttpInfo($entiteitnummer, $lijnnummer, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation geefGemeentenVoorLijnAsyncWithHttpInfo
     *
     * geef de gemeenten die bediend worden voor de opgegeven lijn
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  int $lijnnummer Format - int32. nummer van de lijn (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefGemeentenVoorLijn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefGemeentenVoorLijnAsyncWithHttpInfo($entiteitnummer, $lijnnummer, string $contentType = self::contentTypes['geefGemeentenVoorLijn'][0])
    {
        $returnType = '\District09\DeLijnCoreAPI\Model\Gemeenten';
        $request = $this->geefGemeentenVoorLijnRequest($entiteitnummer, $lijnnummer, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'geefGemeentenVoorLijn'
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  int $lijnnummer Format - int32. nummer van de lijn (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefGemeentenVoorLijn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function geefGemeentenVoorLijnRequest($entiteitnummer, $lijnnummer, string $contentType = self::contentTypes['geefGemeentenVoorLijn'][0])
    {

        // verify the required parameter 'entiteitnummer' is set
        if ($entiteitnummer === null || (is_array($entiteitnummer) && count($entiteitnummer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $entiteitnummer when calling geefGemeentenVoorLijn'
            );
        }

        // verify the required parameter 'lijnnummer' is set
        if ($lijnnummer === null || (is_array($lijnnummer) && count($lijnnummer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lijnnummer when calling geefGemeentenVoorLijn'
            );
        }


        $resourcePath = '/lijnen/{entiteitnummer}/{lijnnummer}/gemeenten';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($entiteitnummer !== null) {
            $resourcePath = str_replace(
                '{' . 'entiteitnummer' . '}',
                ObjectSerializer::toPathValue($entiteitnummer),
                $resourcePath
            );
        }
        // path params
        if ($lijnnummer !== null) {
            $resourcePath = str_replace(
                '{' . 'lijnnummer' . '}',
                ObjectSerializer::toPathValue($lijnnummer),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Ocp-Apim-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation geefGeplandeStoringenVoorLijnrichting
     *
     * geef de omleidingen voor de opgegeven lijnrichting
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  int $lijnnummer Format - int32. nummer van de lijn (required)
     * @param  string $richting richting van de lijn (required)
     * @param  string $datum datum in formaat yyyy-MM-dd met als default waarde de huidige datum (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefGeplandeStoringenVoorLijnrichting'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \District09\DeLijnCoreAPI\Model\Omleidingen
     */
    public function geefGeplandeStoringenVoorLijnrichting($entiteitnummer, $lijnnummer, $richting, $datum = null, string $contentType = self::contentTypes['geefGeplandeStoringenVoorLijnrichting'][0])
    {
        list($response) = $this->geefGeplandeStoringenVoorLijnrichtingWithHttpInfo($entiteitnummer, $lijnnummer, $richting, $datum, $contentType);
        return $response;
    }

    /**
     * Operation geefGeplandeStoringenVoorLijnrichtingWithHttpInfo
     *
     * geef de omleidingen voor de opgegeven lijnrichting
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  int $lijnnummer Format - int32. nummer van de lijn (required)
     * @param  string $richting richting van de lijn (required)
     * @param  string $datum datum in formaat yyyy-MM-dd met als default waarde de huidige datum (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefGeplandeStoringenVoorLijnrichting'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \District09\DeLijnCoreAPI\Model\Omleidingen, HTTP status code, HTTP response headers (array of strings)
     */
    public function geefGeplandeStoringenVoorLijnrichtingWithHttpInfo($entiteitnummer, $lijnnummer, $richting, $datum = null, string $contentType = self::contentTypes['geefGeplandeStoringenVoorLijnrichting'][0])
    {
        $request = $this->geefGeplandeStoringenVoorLijnrichtingRequest($entiteitnummer, $lijnnummer, $richting, $datum, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\District09\DeLijnCoreAPI\Model\Omleidingen' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\District09\DeLijnCoreAPI\Model\Omleidingen' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\District09\DeLijnCoreAPI\Model\Omleidingen', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\District09\DeLijnCoreAPI\Model\Omleidingen';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\District09\DeLijnCoreAPI\Model\Omleidingen',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation geefGeplandeStoringenVoorLijnrichtingAsync
     *
     * geef de omleidingen voor de opgegeven lijnrichting
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  int $lijnnummer Format - int32. nummer van de lijn (required)
     * @param  string $richting richting van de lijn (required)
     * @param  string $datum datum in formaat yyyy-MM-dd met als default waarde de huidige datum (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefGeplandeStoringenVoorLijnrichting'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefGeplandeStoringenVoorLijnrichtingAsync($entiteitnummer, $lijnnummer, $richting, $datum = null, string $contentType = self::contentTypes['geefGeplandeStoringenVoorLijnrichting'][0])
    {
        return $this->geefGeplandeStoringenVoorLijnrichtingAsyncWithHttpInfo($entiteitnummer, $lijnnummer, $richting, $datum, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation geefGeplandeStoringenVoorLijnrichtingAsyncWithHttpInfo
     *
     * geef de omleidingen voor de opgegeven lijnrichting
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  int $lijnnummer Format - int32. nummer van de lijn (required)
     * @param  string $richting richting van de lijn (required)
     * @param  string $datum datum in formaat yyyy-MM-dd met als default waarde de huidige datum (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefGeplandeStoringenVoorLijnrichting'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefGeplandeStoringenVoorLijnrichtingAsyncWithHttpInfo($entiteitnummer, $lijnnummer, $richting, $datum = null, string $contentType = self::contentTypes['geefGeplandeStoringenVoorLijnrichting'][0])
    {
        $returnType = '\District09\DeLijnCoreAPI\Model\Omleidingen';
        $request = $this->geefGeplandeStoringenVoorLijnrichtingRequest($entiteitnummer, $lijnnummer, $richting, $datum, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'geefGeplandeStoringenVoorLijnrichting'
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  int $lijnnummer Format - int32. nummer van de lijn (required)
     * @param  string $richting richting van de lijn (required)
     * @param  string $datum datum in formaat yyyy-MM-dd met als default waarde de huidige datum (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefGeplandeStoringenVoorLijnrichting'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function geefGeplandeStoringenVoorLijnrichtingRequest($entiteitnummer, $lijnnummer, $richting, $datum = null, string $contentType = self::contentTypes['geefGeplandeStoringenVoorLijnrichting'][0])
    {

        // verify the required parameter 'entiteitnummer' is set
        if ($entiteitnummer === null || (is_array($entiteitnummer) && count($entiteitnummer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $entiteitnummer when calling geefGeplandeStoringenVoorLijnrichting'
            );
        }

        // verify the required parameter 'lijnnummer' is set
        if ($lijnnummer === null || (is_array($lijnnummer) && count($lijnnummer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lijnnummer when calling geefGeplandeStoringenVoorLijnrichting'
            );
        }

        // verify the required parameter 'richting' is set
        if ($richting === null || (is_array($richting) && count($richting) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $richting when calling geefGeplandeStoringenVoorLijnrichting'
            );
        }



        $resourcePath = '/lijnen/{entiteitnummer}/{lijnnummer}/lijnrichtingen/{richting}/omleidingen';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datum,
            'datum', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($entiteitnummer !== null) {
            $resourcePath = str_replace(
                '{' . 'entiteitnummer' . '}',
                ObjectSerializer::toPathValue($entiteitnummer),
                $resourcePath
            );
        }
        // path params
        if ($lijnnummer !== null) {
            $resourcePath = str_replace(
                '{' . 'lijnnummer' . '}',
                ObjectSerializer::toPathValue($lijnnummer),
                $resourcePath
            );
        }
        // path params
        if ($richting !== null) {
            $resourcePath = str_replace(
                '{' . 'richting' . '}',
                ObjectSerializer::toPathValue($richting),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Ocp-Apim-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation geefGeplandeStoringenVoorLijnrichtingenLijst
     *
     * geef de omleidingen voor de opgegeven lijst van lijnrichtingen
     *
     * @param  string $lijnrichtingsleutels lijst van lijnrichtingen (bv 1_500_HEEN_1_550_TERUG) (required)
     * @param  string $datum datum in formaat yyyy-MM-dd met als default waarde de huidige datum (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefGeplandeStoringenVoorLijnrichtingenLijst'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \District09\DeLijnCoreAPI\Model\Omleidingen
     */
    public function geefGeplandeStoringenVoorLijnrichtingenLijst($lijnrichtingsleutels, $datum = null, string $contentType = self::contentTypes['geefGeplandeStoringenVoorLijnrichtingenLijst'][0])
    {
        list($response) = $this->geefGeplandeStoringenVoorLijnrichtingenLijstWithHttpInfo($lijnrichtingsleutels, $datum, $contentType);
        return $response;
    }

    /**
     * Operation geefGeplandeStoringenVoorLijnrichtingenLijstWithHttpInfo
     *
     * geef de omleidingen voor de opgegeven lijst van lijnrichtingen
     *
     * @param  string $lijnrichtingsleutels lijst van lijnrichtingen (bv 1_500_HEEN_1_550_TERUG) (required)
     * @param  string $datum datum in formaat yyyy-MM-dd met als default waarde de huidige datum (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefGeplandeStoringenVoorLijnrichtingenLijst'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \District09\DeLijnCoreAPI\Model\Omleidingen, HTTP status code, HTTP response headers (array of strings)
     */
    public function geefGeplandeStoringenVoorLijnrichtingenLijstWithHttpInfo($lijnrichtingsleutels, $datum = null, string $contentType = self::contentTypes['geefGeplandeStoringenVoorLijnrichtingenLijst'][0])
    {
        $request = $this->geefGeplandeStoringenVoorLijnrichtingenLijstRequest($lijnrichtingsleutels, $datum, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\District09\DeLijnCoreAPI\Model\Omleidingen' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\District09\DeLijnCoreAPI\Model\Omleidingen' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\District09\DeLijnCoreAPI\Model\Omleidingen', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\District09\DeLijnCoreAPI\Model\Omleidingen';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\District09\DeLijnCoreAPI\Model\Omleidingen',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation geefGeplandeStoringenVoorLijnrichtingenLijstAsync
     *
     * geef de omleidingen voor de opgegeven lijst van lijnrichtingen
     *
     * @param  string $lijnrichtingsleutels lijst van lijnrichtingen (bv 1_500_HEEN_1_550_TERUG) (required)
     * @param  string $datum datum in formaat yyyy-MM-dd met als default waarde de huidige datum (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefGeplandeStoringenVoorLijnrichtingenLijst'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefGeplandeStoringenVoorLijnrichtingenLijstAsync($lijnrichtingsleutels, $datum = null, string $contentType = self::contentTypes['geefGeplandeStoringenVoorLijnrichtingenLijst'][0])
    {
        return $this->geefGeplandeStoringenVoorLijnrichtingenLijstAsyncWithHttpInfo($lijnrichtingsleutels, $datum, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation geefGeplandeStoringenVoorLijnrichtingenLijstAsyncWithHttpInfo
     *
     * geef de omleidingen voor de opgegeven lijst van lijnrichtingen
     *
     * @param  string $lijnrichtingsleutels lijst van lijnrichtingen (bv 1_500_HEEN_1_550_TERUG) (required)
     * @param  string $datum datum in formaat yyyy-MM-dd met als default waarde de huidige datum (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefGeplandeStoringenVoorLijnrichtingenLijst'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefGeplandeStoringenVoorLijnrichtingenLijstAsyncWithHttpInfo($lijnrichtingsleutels, $datum = null, string $contentType = self::contentTypes['geefGeplandeStoringenVoorLijnrichtingenLijst'][0])
    {
        $returnType = '\District09\DeLijnCoreAPI\Model\Omleidingen';
        $request = $this->geefGeplandeStoringenVoorLijnrichtingenLijstRequest($lijnrichtingsleutels, $datum, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'geefGeplandeStoringenVoorLijnrichtingenLijst'
     *
     * @param  string $lijnrichtingsleutels lijst van lijnrichtingen (bv 1_500_HEEN_1_550_TERUG) (required)
     * @param  string $datum datum in formaat yyyy-MM-dd met als default waarde de huidige datum (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefGeplandeStoringenVoorLijnrichtingenLijst'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function geefGeplandeStoringenVoorLijnrichtingenLijstRequest($lijnrichtingsleutels, $datum = null, string $contentType = self::contentTypes['geefGeplandeStoringenVoorLijnrichtingenLijst'][0])
    {

        // verify the required parameter 'lijnrichtingsleutels' is set
        if ($lijnrichtingsleutels === null || (is_array($lijnrichtingsleutels) && count($lijnrichtingsleutels) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lijnrichtingsleutels when calling geefGeplandeStoringenVoorLijnrichtingenLijst'
            );
        }



        $resourcePath = '/lijnen/lijst/{lijnrichtingsleutels}/omleidingen';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datum,
            'datum', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($lijnrichtingsleutels !== null) {
            $resourcePath = str_replace(
                '{' . 'lijnrichtingsleutels' . '}',
                ObjectSerializer::toPathValue($lijnrichtingsleutels),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Ocp-Apim-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation geefHaltesVoorLijnrichting
     *
     * geef de haltes die de door opgegeven lijnrichting worden bediend
     *
     * @param  int $entiteitnummer Format - int32. (required)
     * @param  int $lijnnummer Format - int32. (required)
     * @param  string $richting richting (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefHaltesVoorLijnrichting'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \District09\DeLijnCoreAPI\Model\Haltes
     */
    public function geefHaltesVoorLijnrichting($entiteitnummer, $lijnnummer, $richting, string $contentType = self::contentTypes['geefHaltesVoorLijnrichting'][0])
    {
        list($response) = $this->geefHaltesVoorLijnrichtingWithHttpInfo($entiteitnummer, $lijnnummer, $richting, $contentType);
        return $response;
    }

    /**
     * Operation geefHaltesVoorLijnrichtingWithHttpInfo
     *
     * geef de haltes die de door opgegeven lijnrichting worden bediend
     *
     * @param  int $entiteitnummer Format - int32. (required)
     * @param  int $lijnnummer Format - int32. (required)
     * @param  string $richting (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefHaltesVoorLijnrichting'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \District09\DeLijnCoreAPI\Model\Haltes, HTTP status code, HTTP response headers (array of strings)
     */
    public function geefHaltesVoorLijnrichtingWithHttpInfo($entiteitnummer, $lijnnummer, $richting, string $contentType = self::contentTypes['geefHaltesVoorLijnrichting'][0])
    {
        $request = $this->geefHaltesVoorLijnrichtingRequest($entiteitnummer, $lijnnummer, $richting, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\District09\DeLijnCoreAPI\Model\Haltes' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\District09\DeLijnCoreAPI\Model\Haltes' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\District09\DeLijnCoreAPI\Model\Haltes', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\District09\DeLijnCoreAPI\Model\Haltes';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\District09\DeLijnCoreAPI\Model\Haltes',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation geefHaltesVoorLijnrichtingAsync
     *
     * geef de haltes die de door opgegeven lijnrichting worden bediend
     *
     * @param  int $entiteitnummer Format - int32. (required)
     * @param  int $lijnnummer Format - int32. (required)
     * @param  string $richting (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefHaltesVoorLijnrichting'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefHaltesVoorLijnrichtingAsync($entiteitnummer, $lijnnummer, $richting, string $contentType = self::contentTypes['geefHaltesVoorLijnrichting'][0])
    {
        return $this->geefHaltesVoorLijnrichtingAsyncWithHttpInfo($entiteitnummer, $lijnnummer, $richting, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation geefHaltesVoorLijnrichtingAsyncWithHttpInfo
     *
     * geef de haltes die de door opgegeven lijnrichting worden bediend
     *
     * @param  int $entiteitnummer Format - int32. (required)
     * @param  int $lijnnummer Format - int32. (required)
     * @param  string $richting (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefHaltesVoorLijnrichting'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefHaltesVoorLijnrichtingAsyncWithHttpInfo($entiteitnummer, $lijnnummer, $richting, string $contentType = self::contentTypes['geefHaltesVoorLijnrichting'][0])
    {
        $returnType = '\District09\DeLijnCoreAPI\Model\Haltes';
        $request = $this->geefHaltesVoorLijnrichtingRequest($entiteitnummer, $lijnnummer, $richting, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'geefHaltesVoorLijnrichting'
     *
     * @param  int $entiteitnummer Format - int32. (required)
     * @param  int $lijnnummer Format - int32. (required)
     * @param  string $richting (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefHaltesVoorLijnrichting'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function geefHaltesVoorLijnrichtingRequest($entiteitnummer, $lijnnummer, $richting, string $contentType = self::contentTypes['geefHaltesVoorLijnrichting'][0])
    {

        // verify the required parameter 'entiteitnummer' is set
        if ($entiteitnummer === null || (is_array($entiteitnummer) && count($entiteitnummer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $entiteitnummer when calling geefHaltesVoorLijnrichting'
            );
        }

        // verify the required parameter 'lijnnummer' is set
        if ($lijnnummer === null || (is_array($lijnnummer) && count($lijnnummer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lijnnummer when calling geefHaltesVoorLijnrichting'
            );
        }

        // verify the required parameter 'richting' is set
        if ($richting === null || (is_array($richting) && count($richting) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $richting when calling geefHaltesVoorLijnrichting'
            );
        }


        $resourcePath = '/lijnen/{entiteitnummer}/{lijnnummer}/lijnrichtingen/{richting}/haltes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($entiteitnummer !== null) {
            $resourcePath = str_replace(
                '{' . 'entiteitnummer' . '}',
                ObjectSerializer::toPathValue($entiteitnummer),
                $resourcePath
            );
        }
        // path params
        if ($lijnnummer !== null) {
            $resourcePath = str_replace(
                '{' . 'lijnnummer' . '}',
                ObjectSerializer::toPathValue($lijnnummer),
                $resourcePath
            );
        }
        // path params
        if ($richting !== null) {
            $resourcePath = str_replace(
                '{' . 'richting' . '}',
                ObjectSerializer::toPathValue($richting),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Ocp-Apim-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation geefLijn
     *
     * geef een lijn op basis van het opgegeven lijnnummer
     *
     * @param  int $entiteitnummer Format - int32. (required)
     * @param  int $lijnnummer Format - int32. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefLijn'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \District09\DeLijnCoreAPI\Model\Lijn
     */
    public function geefLijn($entiteitnummer, $lijnnummer, string $contentType = self::contentTypes['geefLijn'][0])
    {
        list($response) = $this->geefLijnWithHttpInfo($entiteitnummer, $lijnnummer, $contentType);
        return $response;
    }

    /**
     * Operation geefLijnWithHttpInfo
     *
     * geef een lijn op basis van het opgegeven lijnnummer
     *
     * @param  int $entiteitnummer Format - int32. (required)
     * @param  int $lijnnummer Format - int32. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefLijn'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \District09\DeLijnCoreAPI\Model\Lijn, HTTP status code, HTTP response headers (array of strings)
     */
    public function geefLijnWithHttpInfo($entiteitnummer, $lijnnummer, string $contentType = self::contentTypes['geefLijn'][0])
    {
        $request = $this->geefLijnRequest($entiteitnummer, $lijnnummer, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\District09\DeLijnCoreAPI\Model\Lijn' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\District09\DeLijnCoreAPI\Model\Lijn' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\District09\DeLijnCoreAPI\Model\Lijn', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\District09\DeLijnCoreAPI\Model\Lijn';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\District09\DeLijnCoreAPI\Model\Lijn',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation geefLijnAsync
     *
     * geef een lijn op basis van het opgegeven lijnnummer
     *
     * @param  int $entiteitnummer Format - int32. (required)
     * @param  int $lijnnummer Format - int32. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefLijn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefLijnAsync($entiteitnummer, $lijnnummer, string $contentType = self::contentTypes['geefLijn'][0])
    {
        return $this->geefLijnAsyncWithHttpInfo($entiteitnummer, $lijnnummer, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation geefLijnAsyncWithHttpInfo
     *
     * geef een lijn op basis van het opgegeven lijnnummer
     *
     * @param  int $entiteitnummer Format - int32. (required)
     * @param  int $lijnnummer Format - int32. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefLijn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefLijnAsyncWithHttpInfo($entiteitnummer, $lijnnummer, string $contentType = self::contentTypes['geefLijn'][0])
    {
        $returnType = '\District09\DeLijnCoreAPI\Model\Lijn';
        $request = $this->geefLijnRequest($entiteitnummer, $lijnnummer, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'geefLijn'
     *
     * @param  int $entiteitnummer Format - int32. (required)
     * @param  int $lijnnummer Format - int32. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefLijn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function geefLijnRequest($entiteitnummer, $lijnnummer, string $contentType = self::contentTypes['geefLijn'][0])
    {

        // verify the required parameter 'entiteitnummer' is set
        if ($entiteitnummer === null || (is_array($entiteitnummer) && count($entiteitnummer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $entiteitnummer when calling geefLijn'
            );
        }

        // verify the required parameter 'lijnnummer' is set
        if ($lijnnummer === null || (is_array($lijnnummer) && count($lijnnummer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lijnnummer when calling geefLijn'
            );
        }


        $resourcePath = '/lijnen/{entiteitnummer}/{lijnnummer}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($entiteitnummer !== null) {
            $resourcePath = str_replace(
                '{' . 'entiteitnummer' . '}',
                ObjectSerializer::toPathValue($entiteitnummer),
                $resourcePath
            );
        }
        // path params
        if ($lijnnummer !== null) {
            $resourcePath = str_replace(
                '{' . 'lijnnummer' . '}',
                ObjectSerializer::toPathValue($lijnnummer),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Ocp-Apim-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation geefLijnLijst
     *
     * geef een lijst van lijnen op basis van een lijst van lijn sleutels
     *
     * @param  string $lijnsleutels lijst van lijn sleutels (bv 1_500_1_550) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefLijnLijst'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \District09\DeLijnCoreAPI\Model\Lijnen
     */
    public function geefLijnLijst($lijnsleutels, string $contentType = self::contentTypes['geefLijnLijst'][0])
    {
        list($response) = $this->geefLijnLijstWithHttpInfo($lijnsleutels, $contentType);
        return $response;
    }

    /**
     * Operation geefLijnLijstWithHttpInfo
     *
     * geef een lijst van lijnen op basis van een lijst van lijn sleutels
     *
     * @param  string $lijnsleutels lijst van lijn sleutels (bv 1_500_1_550) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefLijnLijst'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \District09\DeLijnCoreAPI\Model\Lijnen, HTTP status code, HTTP response headers (array of strings)
     */
    public function geefLijnLijstWithHttpInfo($lijnsleutels, string $contentType = self::contentTypes['geefLijnLijst'][0])
    {
        $request = $this->geefLijnLijstRequest($lijnsleutels, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\District09\DeLijnCoreAPI\Model\Lijnen' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\District09\DeLijnCoreAPI\Model\Lijnen' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\District09\DeLijnCoreAPI\Model\Lijnen', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\District09\DeLijnCoreAPI\Model\Lijnen';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\District09\DeLijnCoreAPI\Model\Lijnen',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation geefLijnLijstAsync
     *
     * geef een lijst van lijnen op basis van een lijst van lijn sleutels
     *
     * @param  string $lijnsleutels lijst van lijn sleutels (bv 1_500_1_550) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefLijnLijst'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefLijnLijstAsync($lijnsleutels, string $contentType = self::contentTypes['geefLijnLijst'][0])
    {
        return $this->geefLijnLijstAsyncWithHttpInfo($lijnsleutels, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation geefLijnLijstAsyncWithHttpInfo
     *
     * geef een lijst van lijnen op basis van een lijst van lijn sleutels
     *
     * @param  string $lijnsleutels lijst van lijn sleutels (bv 1_500_1_550) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefLijnLijst'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefLijnLijstAsyncWithHttpInfo($lijnsleutels, string $contentType = self::contentTypes['geefLijnLijst'][0])
    {
        $returnType = '\District09\DeLijnCoreAPI\Model\Lijnen';
        $request = $this->geefLijnLijstRequest($lijnsleutels, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'geefLijnLijst'
     *
     * @param  string $lijnsleutels lijst van lijn sleutels (bv 1_500_1_550) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefLijnLijst'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function geefLijnLijstRequest($lijnsleutels, string $contentType = self::contentTypes['geefLijnLijst'][0])
    {

        // verify the required parameter 'lijnsleutels' is set
        if ($lijnsleutels === null || (is_array($lijnsleutels) && count($lijnsleutels) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lijnsleutels when calling geefLijnLijst'
            );
        }


        $resourcePath = '/lijnen/lijst/{lijnsleutels}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($lijnsleutels !== null) {
            $resourcePath = str_replace(
                '{' . 'lijnsleutels' . '}',
                ObjectSerializer::toPathValue($lijnsleutels),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Ocp-Apim-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation geefLijnen
     *
     * geef alle lijnen
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefLijnen'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \District09\DeLijnCoreAPI\Model\Lijnen
     */
    public function geefLijnen(string $contentType = self::contentTypes['geefLijnen'][0])
    {
        list($response) = $this->geefLijnenWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation geefLijnenWithHttpInfo
     *
     * geef alle lijnen
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefLijnen'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \District09\DeLijnCoreAPI\Model\Lijnen, HTTP status code, HTTP response headers (array of strings)
     */
    public function geefLijnenWithHttpInfo(string $contentType = self::contentTypes['geefLijnen'][0])
    {
        $request = $this->geefLijnenRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\District09\DeLijnCoreAPI\Model\Lijnen' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\District09\DeLijnCoreAPI\Model\Lijnen' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\District09\DeLijnCoreAPI\Model\Lijnen', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\District09\DeLijnCoreAPI\Model\Lijnen';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\District09\DeLijnCoreAPI\Model\Lijnen',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation geefLijnenAsync
     *
     * geef alle lijnen
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefLijnen'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefLijnenAsync(string $contentType = self::contentTypes['geefLijnen'][0])
    {
        return $this->geefLijnenAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation geefLijnenAsyncWithHttpInfo
     *
     * geef alle lijnen
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefLijnen'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefLijnenAsyncWithHttpInfo(string $contentType = self::contentTypes['geefLijnen'][0])
    {
        $returnType = '\District09\DeLijnCoreAPI\Model\Lijnen';
        $request = $this->geefLijnenRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'geefLijnen'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefLijnen'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function geefLijnenRequest(string $contentType = self::contentTypes['geefLijnen'][0])
    {


        $resourcePath = '/lijnen';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Ocp-Apim-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation geefLijnkleur
     *
     * geef de lijnkleuren voor het opgegeven lijnnummer
     *
     * @param  int $entiteitnummer Format - int32. (required)
     * @param  int $lijnnummer Format - int32. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefLijnkleur'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \District09\DeLijnCoreAPI\Model\LijnkleurCodes
     */
    public function geefLijnkleur($entiteitnummer, $lijnnummer, string $contentType = self::contentTypes['geefLijnkleur'][0])
    {
        list($response) = $this->geefLijnkleurWithHttpInfo($entiteitnummer, $lijnnummer, $contentType);
        return $response;
    }

    /**
     * Operation geefLijnkleurWithHttpInfo
     *
     * geef de lijnkleuren voor het opgegeven lijnnummer
     *
     * @param  int $entiteitnummer Format - int32. (required)
     * @param  int $lijnnummer Format - int32. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefLijnkleur'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \District09\DeLijnCoreAPI\Model\LijnkleurCodes, HTTP status code, HTTP response headers (array of strings)
     */
    public function geefLijnkleurWithHttpInfo($entiteitnummer, $lijnnummer, string $contentType = self::contentTypes['geefLijnkleur'][0])
    {
        $request = $this->geefLijnkleurRequest($entiteitnummer, $lijnnummer, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\District09\DeLijnCoreAPI\Model\LijnkleurCodes' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\District09\DeLijnCoreAPI\Model\LijnkleurCodes' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\District09\DeLijnCoreAPI\Model\LijnkleurCodes', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\District09\DeLijnCoreAPI\Model\LijnkleurCodes';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\District09\DeLijnCoreAPI\Model\LijnkleurCodes',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation geefLijnkleurAsync
     *
     * geef de lijnkleuren voor het opgegeven lijnnummer
     *
     * @param  int $entiteitnummer Format - int32. (required)
     * @param  int $lijnnummer Format - int32. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefLijnkleur'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefLijnkleurAsync($entiteitnummer, $lijnnummer, string $contentType = self::contentTypes['geefLijnkleur'][0])
    {
        return $this->geefLijnkleurAsyncWithHttpInfo($entiteitnummer, $lijnnummer, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation geefLijnkleurAsyncWithHttpInfo
     *
     * geef de lijnkleuren voor het opgegeven lijnnummer
     *
     * @param  int $entiteitnummer Format - int32. (required)
     * @param  int $lijnnummer Format - int32. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefLijnkleur'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefLijnkleurAsyncWithHttpInfo($entiteitnummer, $lijnnummer, string $contentType = self::contentTypes['geefLijnkleur'][0])
    {
        $returnType = '\District09\DeLijnCoreAPI\Model\LijnkleurCodes';
        $request = $this->geefLijnkleurRequest($entiteitnummer, $lijnnummer, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'geefLijnkleur'
     *
     * @param  int $entiteitnummer Format - int32. (required)
     * @param  int $lijnnummer Format - int32. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefLijnkleur'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function geefLijnkleurRequest($entiteitnummer, $lijnnummer, string $contentType = self::contentTypes['geefLijnkleur'][0])
    {

        // verify the required parameter 'entiteitnummer' is set
        if ($entiteitnummer === null || (is_array($entiteitnummer) && count($entiteitnummer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $entiteitnummer when calling geefLijnkleur'
            );
        }

        // verify the required parameter 'lijnnummer' is set
        if ($lijnnummer === null || (is_array($lijnnummer) && count($lijnnummer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lijnnummer when calling geefLijnkleur'
            );
        }


        $resourcePath = '/lijnen/{entiteitnummer}/{lijnnummer}/lijnkleuren';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($entiteitnummer !== null) {
            $resourcePath = str_replace(
                '{' . 'entiteitnummer' . '}',
                ObjectSerializer::toPathValue($entiteitnummer),
                $resourcePath
            );
        }
        // path params
        if ($lijnnummer !== null) {
            $resourcePath = str_replace(
                '{' . 'lijnnummer' . '}',
                ObjectSerializer::toPathValue($lijnnummer),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Ocp-Apim-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation geefLijnkleurLijst
     *
     * geef de lijnkleuren van lijnen op basis van een lijst van lijn sleutels
     *
     * @param  string $lijnsleutels lijst van lijn sleutels (bv 1_500_1_550) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefLijnkleurLijst'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \District09\DeLijnCoreAPI\Model\LijnkleurCodes
     */
    public function geefLijnkleurLijst($lijnsleutels, string $contentType = self::contentTypes['geefLijnkleurLijst'][0])
    {
        list($response) = $this->geefLijnkleurLijstWithHttpInfo($lijnsleutels, $contentType);
        return $response;
    }

    /**
     * Operation geefLijnkleurLijstWithHttpInfo
     *
     * geef de lijnkleuren van lijnen op basis van een lijst van lijn sleutels
     *
     * @param  string $lijnsleutels lijst van lijn sleutels (bv 1_500_1_550) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefLijnkleurLijst'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \District09\DeLijnCoreAPI\Model\LijnkleurCodes, HTTP status code, HTTP response headers (array of strings)
     */
    public function geefLijnkleurLijstWithHttpInfo($lijnsleutels, string $contentType = self::contentTypes['geefLijnkleurLijst'][0])
    {
        $request = $this->geefLijnkleurLijstRequest($lijnsleutels, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\District09\DeLijnCoreAPI\Model\LijnkleurCodes' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\District09\DeLijnCoreAPI\Model\LijnkleurCodes' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\District09\DeLijnCoreAPI\Model\LijnkleurCodes', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\District09\DeLijnCoreAPI\Model\LijnkleurCodes';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\District09\DeLijnCoreAPI\Model\LijnkleurCodes',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation geefLijnkleurLijstAsync
     *
     * geef de lijnkleuren van lijnen op basis van een lijst van lijn sleutels
     *
     * @param  string $lijnsleutels lijst van lijn sleutels (bv 1_500_1_550) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefLijnkleurLijst'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefLijnkleurLijstAsync($lijnsleutels, string $contentType = self::contentTypes['geefLijnkleurLijst'][0])
    {
        return $this->geefLijnkleurLijstAsyncWithHttpInfo($lijnsleutels, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation geefLijnkleurLijstAsyncWithHttpInfo
     *
     * geef de lijnkleuren van lijnen op basis van een lijst van lijn sleutels
     *
     * @param  string $lijnsleutels lijst van lijn sleutels (bv 1_500_1_550) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefLijnkleurLijst'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefLijnkleurLijstAsyncWithHttpInfo($lijnsleutels, string $contentType = self::contentTypes['geefLijnkleurLijst'][0])
    {
        $returnType = '\District09\DeLijnCoreAPI\Model\LijnkleurCodes';
        $request = $this->geefLijnkleurLijstRequest($lijnsleutels, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'geefLijnkleurLijst'
     *
     * @param  string $lijnsleutels lijst van lijn sleutels (bv 1_500_1_550) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefLijnkleurLijst'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function geefLijnkleurLijstRequest($lijnsleutels, string $contentType = self::contentTypes['geefLijnkleurLijst'][0])
    {

        // verify the required parameter 'lijnsleutels' is set
        if ($lijnsleutels === null || (is_array($lijnsleutels) && count($lijnsleutels) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lijnsleutels when calling geefLijnkleurLijst'
            );
        }


        $resourcePath = '/lijnen/lijst/{lijnsleutels}/lijnkleuren';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($lijnsleutels !== null) {
            $resourcePath = str_replace(
                '{' . 'lijnsleutels' . '}',
                ObjectSerializer::toPathValue($lijnsleutels),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Ocp-Apim-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation geefLijnrichting
     *
     * geef een lijnrichting voor de opgegeven lijnrichtingcode
     *
     * @param  int $entiteitnummer Format - int32. (required)
     * @param  int $lijnnummer Format - int32. (required)
     * @param  string $richting richting (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefLijnrichting'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \District09\DeLijnCoreAPI\Model\Lijnrichting
     */
    public function geefLijnrichting($entiteitnummer, $lijnnummer, $richting, string $contentType = self::contentTypes['geefLijnrichting'][0])
    {
        list($response) = $this->geefLijnrichtingWithHttpInfo($entiteitnummer, $lijnnummer, $richting, $contentType);
        return $response;
    }

    /**
     * Operation geefLijnrichtingWithHttpInfo
     *
     * geef een lijnrichting voor de opgegeven lijnrichtingcode
     *
     * @param  int $entiteitnummer Format - int32. (required)
     * @param  int $lijnnummer Format - int32. (required)
     * @param  string $richting (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefLijnrichting'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \District09\DeLijnCoreAPI\Model\Lijnrichting, HTTP status code, HTTP response headers (array of strings)
     */
    public function geefLijnrichtingWithHttpInfo($entiteitnummer, $lijnnummer, $richting, string $contentType = self::contentTypes['geefLijnrichting'][0])
    {
        $request = $this->geefLijnrichtingRequest($entiteitnummer, $lijnnummer, $richting, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\District09\DeLijnCoreAPI\Model\Lijnrichting' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\District09\DeLijnCoreAPI\Model\Lijnrichting' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\District09\DeLijnCoreAPI\Model\Lijnrichting', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\District09\DeLijnCoreAPI\Model\Lijnrichting';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\District09\DeLijnCoreAPI\Model\Lijnrichting',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation geefLijnrichtingAsync
     *
     * geef een lijnrichting voor de opgegeven lijnrichtingcode
     *
     * @param  int $entiteitnummer Format - int32. (required)
     * @param  int $lijnnummer Format - int32. (required)
     * @param  string $richting (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefLijnrichting'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefLijnrichtingAsync($entiteitnummer, $lijnnummer, $richting, string $contentType = self::contentTypes['geefLijnrichting'][0])
    {
        return $this->geefLijnrichtingAsyncWithHttpInfo($entiteitnummer, $lijnnummer, $richting, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation geefLijnrichtingAsyncWithHttpInfo
     *
     * geef een lijnrichting voor de opgegeven lijnrichtingcode
     *
     * @param  int $entiteitnummer Format - int32. (required)
     * @param  int $lijnnummer Format - int32. (required)
     * @param  string $richting (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefLijnrichting'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefLijnrichtingAsyncWithHttpInfo($entiteitnummer, $lijnnummer, $richting, string $contentType = self::contentTypes['geefLijnrichting'][0])
    {
        $returnType = '\District09\DeLijnCoreAPI\Model\Lijnrichting';
        $request = $this->geefLijnrichtingRequest($entiteitnummer, $lijnnummer, $richting, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'geefLijnrichting'
     *
     * @param  int $entiteitnummer Format - int32. (required)
     * @param  int $lijnnummer Format - int32. (required)
     * @param  string $richting (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefLijnrichting'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function geefLijnrichtingRequest($entiteitnummer, $lijnnummer, $richting, string $contentType = self::contentTypes['geefLijnrichting'][0])
    {

        // verify the required parameter 'entiteitnummer' is set
        if ($entiteitnummer === null || (is_array($entiteitnummer) && count($entiteitnummer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $entiteitnummer when calling geefLijnrichting'
            );
        }

        // verify the required parameter 'lijnnummer' is set
        if ($lijnnummer === null || (is_array($lijnnummer) && count($lijnnummer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lijnnummer when calling geefLijnrichting'
            );
        }

        // verify the required parameter 'richting' is set
        if ($richting === null || (is_array($richting) && count($richting) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $richting when calling geefLijnrichting'
            );
        }


        $resourcePath = '/lijnen/{entiteitnummer}/{lijnnummer}/lijnrichtingen/{richting}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($entiteitnummer !== null) {
            $resourcePath = str_replace(
                '{' . 'entiteitnummer' . '}',
                ObjectSerializer::toPathValue($entiteitnummer),
                $resourcePath
            );
        }
        // path params
        if ($lijnnummer !== null) {
            $resourcePath = str_replace(
                '{' . 'lijnnummer' . '}',
                ObjectSerializer::toPathValue($lijnnummer),
                $resourcePath
            );
        }
        // path params
        if ($richting !== null) {
            $resourcePath = str_replace(
                '{' . 'richting' . '}',
                ObjectSerializer::toPathValue($richting),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Ocp-Apim-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation geefLijnrichtingen
     *
     * geef de lijnrichtingen voor het opgegeven lijnnummer
     *
     * @param  int $entiteitnummer Format - int32. (required)
     * @param  int $lijnnummer Format - int32. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefLijnrichtingen'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \District09\DeLijnCoreAPI\Model\Lijnrichtingen
     */
    public function geefLijnrichtingen($entiteitnummer, $lijnnummer, string $contentType = self::contentTypes['geefLijnrichtingen'][0])
    {
        list($response) = $this->geefLijnrichtingenWithHttpInfo($entiteitnummer, $lijnnummer, $contentType);
        return $response;
    }

    /**
     * Operation geefLijnrichtingenWithHttpInfo
     *
     * geef de lijnrichtingen voor het opgegeven lijnnummer
     *
     * @param  int $entiteitnummer Format - int32. (required)
     * @param  int $lijnnummer Format - int32. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefLijnrichtingen'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \District09\DeLijnCoreAPI\Model\Lijnrichtingen, HTTP status code, HTTP response headers (array of strings)
     */
    public function geefLijnrichtingenWithHttpInfo($entiteitnummer, $lijnnummer, string $contentType = self::contentTypes['geefLijnrichtingen'][0])
    {
        $request = $this->geefLijnrichtingenRequest($entiteitnummer, $lijnnummer, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\District09\DeLijnCoreAPI\Model\Lijnrichtingen' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\District09\DeLijnCoreAPI\Model\Lijnrichtingen' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\District09\DeLijnCoreAPI\Model\Lijnrichtingen', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\District09\DeLijnCoreAPI\Model\Lijnrichtingen';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\District09\DeLijnCoreAPI\Model\Lijnrichtingen',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation geefLijnrichtingenAsync
     *
     * geef de lijnrichtingen voor het opgegeven lijnnummer
     *
     * @param  int $entiteitnummer Format - int32. (required)
     * @param  int $lijnnummer Format - int32. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefLijnrichtingen'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefLijnrichtingenAsync($entiteitnummer, $lijnnummer, string $contentType = self::contentTypes['geefLijnrichtingen'][0])
    {
        return $this->geefLijnrichtingenAsyncWithHttpInfo($entiteitnummer, $lijnnummer, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation geefLijnrichtingenAsyncWithHttpInfo
     *
     * geef de lijnrichtingen voor het opgegeven lijnnummer
     *
     * @param  int $entiteitnummer Format - int32. (required)
     * @param  int $lijnnummer Format - int32. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefLijnrichtingen'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefLijnrichtingenAsyncWithHttpInfo($entiteitnummer, $lijnnummer, string $contentType = self::contentTypes['geefLijnrichtingen'][0])
    {
        $returnType = '\District09\DeLijnCoreAPI\Model\Lijnrichtingen';
        $request = $this->geefLijnrichtingenRequest($entiteitnummer, $lijnnummer, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'geefLijnrichtingen'
     *
     * @param  int $entiteitnummer Format - int32. (required)
     * @param  int $lijnnummer Format - int32. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefLijnrichtingen'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function geefLijnrichtingenRequest($entiteitnummer, $lijnnummer, string $contentType = self::contentTypes['geefLijnrichtingen'][0])
    {

        // verify the required parameter 'entiteitnummer' is set
        if ($entiteitnummer === null || (is_array($entiteitnummer) && count($entiteitnummer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $entiteitnummer when calling geefLijnrichtingen'
            );
        }

        // verify the required parameter 'lijnnummer' is set
        if ($lijnnummer === null || (is_array($lijnnummer) && count($lijnnummer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lijnnummer when calling geefLijnrichtingen'
            );
        }


        $resourcePath = '/lijnen/{entiteitnummer}/{lijnnummer}/lijnrichtingen';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($entiteitnummer !== null) {
            $resourcePath = str_replace(
                '{' . 'entiteitnummer' . '}',
                ObjectSerializer::toPathValue($entiteitnummer),
                $resourcePath
            );
        }
        // path params
        if ($lijnnummer !== null) {
            $resourcePath = str_replace(
                '{' . 'lijnnummer' . '}',
                ObjectSerializer::toPathValue($lijnnummer),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Ocp-Apim-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation geefLijnrichtingenLijst
     *
     * geef de lijnrichtingen van lijnen op basis van een lijst van lijn sleutels
     *
     * @param  string $lijnsleutels lijst van lijn sleutels (bv 1_500_1_550) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefLijnrichtingenLijst'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \District09\DeLijnCoreAPI\Model\LijnLijnrichtingenLijst
     */
    public function geefLijnrichtingenLijst($lijnsleutels, string $contentType = self::contentTypes['geefLijnrichtingenLijst'][0])
    {
        list($response) = $this->geefLijnrichtingenLijstWithHttpInfo($lijnsleutels, $contentType);
        return $response;
    }

    /**
     * Operation geefLijnrichtingenLijstWithHttpInfo
     *
     * geef de lijnrichtingen van lijnen op basis van een lijst van lijn sleutels
     *
     * @param  string $lijnsleutels lijst van lijn sleutels (bv 1_500_1_550) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefLijnrichtingenLijst'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \District09\DeLijnCoreAPI\Model\LijnLijnrichtingenLijst, HTTP status code, HTTP response headers (array of strings)
     */
    public function geefLijnrichtingenLijstWithHttpInfo($lijnsleutels, string $contentType = self::contentTypes['geefLijnrichtingenLijst'][0])
    {
        $request = $this->geefLijnrichtingenLijstRequest($lijnsleutels, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\District09\DeLijnCoreAPI\Model\LijnLijnrichtingenLijst' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\District09\DeLijnCoreAPI\Model\LijnLijnrichtingenLijst' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\District09\DeLijnCoreAPI\Model\LijnLijnrichtingenLijst', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\District09\DeLijnCoreAPI\Model\LijnLijnrichtingenLijst';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\District09\DeLijnCoreAPI\Model\LijnLijnrichtingenLijst',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation geefLijnrichtingenLijstAsync
     *
     * geef de lijnrichtingen van lijnen op basis van een lijst van lijn sleutels
     *
     * @param  string $lijnsleutels lijst van lijn sleutels (bv 1_500_1_550) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefLijnrichtingenLijst'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefLijnrichtingenLijstAsync($lijnsleutels, string $contentType = self::contentTypes['geefLijnrichtingenLijst'][0])
    {
        return $this->geefLijnrichtingenLijstAsyncWithHttpInfo($lijnsleutels, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation geefLijnrichtingenLijstAsyncWithHttpInfo
     *
     * geef de lijnrichtingen van lijnen op basis van een lijst van lijn sleutels
     *
     * @param  string $lijnsleutels lijst van lijn sleutels (bv 1_500_1_550) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefLijnrichtingenLijst'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefLijnrichtingenLijstAsyncWithHttpInfo($lijnsleutels, string $contentType = self::contentTypes['geefLijnrichtingenLijst'][0])
    {
        $returnType = '\District09\DeLijnCoreAPI\Model\LijnLijnrichtingenLijst';
        $request = $this->geefLijnrichtingenLijstRequest($lijnsleutels, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'geefLijnrichtingenLijst'
     *
     * @param  string $lijnsleutels lijst van lijn sleutels (bv 1_500_1_550) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefLijnrichtingenLijst'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function geefLijnrichtingenLijstRequest($lijnsleutels, string $contentType = self::contentTypes['geefLijnrichtingenLijst'][0])
    {

        // verify the required parameter 'lijnsleutels' is set
        if ($lijnsleutels === null || (is_array($lijnsleutels) && count($lijnsleutels) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lijnsleutels when calling geefLijnrichtingenLijst'
            );
        }


        $resourcePath = '/lijnen/lijst/{lijnsleutels}/lijnrichtingen';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($lijnsleutels !== null) {
            $resourcePath = str_replace(
                '{' . 'lijnsleutels' . '}',
                ObjectSerializer::toPathValue($lijnsleutels),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Ocp-Apim-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation geefOnGeplandeStoringenVoorLijnrichting
     *
     * geef de storingen voor de opgegeven lijnrichting
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  int $lijnnummer Format - int32. nummer van de lijn (required)
     * @param  string $richting richting van de lijn (required)
     * @param  string $datum datum in formaat yyyy-MM-dd met als default waarde de huidige datum (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefOnGeplandeStoringenVoorLijnrichting'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \District09\DeLijnCoreAPI\Model\Omleidingen
     */
    public function geefOnGeplandeStoringenVoorLijnrichting($entiteitnummer, $lijnnummer, $richting, $datum = null, string $contentType = self::contentTypes['geefOnGeplandeStoringenVoorLijnrichting'][0])
    {
        list($response) = $this->geefOnGeplandeStoringenVoorLijnrichtingWithHttpInfo($entiteitnummer, $lijnnummer, $richting, $datum, $contentType);
        return $response;
    }

    /**
     * Operation geefOnGeplandeStoringenVoorLijnrichtingWithHttpInfo
     *
     * geef de storingen voor de opgegeven lijnrichting
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  int $lijnnummer Format - int32. nummer van de lijn (required)
     * @param  string $richting richting van de lijn (required)
     * @param  string $datum datum in formaat yyyy-MM-dd met als default waarde de huidige datum (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefOnGeplandeStoringenVoorLijnrichting'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \District09\DeLijnCoreAPI\Model\Omleidingen, HTTP status code, HTTP response headers (array of strings)
     */
    public function geefOnGeplandeStoringenVoorLijnrichtingWithHttpInfo($entiteitnummer, $lijnnummer, $richting, $datum = null, string $contentType = self::contentTypes['geefOnGeplandeStoringenVoorLijnrichting'][0])
    {
        $request = $this->geefOnGeplandeStoringenVoorLijnrichtingRequest($entiteitnummer, $lijnnummer, $richting, $datum, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\District09\DeLijnCoreAPI\Model\Omleidingen' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\District09\DeLijnCoreAPI\Model\Omleidingen' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\District09\DeLijnCoreAPI\Model\Omleidingen', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\District09\DeLijnCoreAPI\Model\Omleidingen';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\District09\DeLijnCoreAPI\Model\Omleidingen',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation geefOnGeplandeStoringenVoorLijnrichtingAsync
     *
     * geef de storingen voor de opgegeven lijnrichting
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  int $lijnnummer Format - int32. nummer van de lijn (required)
     * @param  string $richting richting van de lijn (required)
     * @param  string $datum datum in formaat yyyy-MM-dd met als default waarde de huidige datum (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefOnGeplandeStoringenVoorLijnrichting'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefOnGeplandeStoringenVoorLijnrichtingAsync($entiteitnummer, $lijnnummer, $richting, $datum = null, string $contentType = self::contentTypes['geefOnGeplandeStoringenVoorLijnrichting'][0])
    {
        return $this->geefOnGeplandeStoringenVoorLijnrichtingAsyncWithHttpInfo($entiteitnummer, $lijnnummer, $richting, $datum, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation geefOnGeplandeStoringenVoorLijnrichtingAsyncWithHttpInfo
     *
     * geef de storingen voor de opgegeven lijnrichting
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  int $lijnnummer Format - int32. nummer van de lijn (required)
     * @param  string $richting richting van de lijn (required)
     * @param  string $datum datum in formaat yyyy-MM-dd met als default waarde de huidige datum (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefOnGeplandeStoringenVoorLijnrichting'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefOnGeplandeStoringenVoorLijnrichtingAsyncWithHttpInfo($entiteitnummer, $lijnnummer, $richting, $datum = null, string $contentType = self::contentTypes['geefOnGeplandeStoringenVoorLijnrichting'][0])
    {
        $returnType = '\District09\DeLijnCoreAPI\Model\Omleidingen';
        $request = $this->geefOnGeplandeStoringenVoorLijnrichtingRequest($entiteitnummer, $lijnnummer, $richting, $datum, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'geefOnGeplandeStoringenVoorLijnrichting'
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  int $lijnnummer Format - int32. nummer van de lijn (required)
     * @param  string $richting richting van de lijn (required)
     * @param  string $datum datum in formaat yyyy-MM-dd met als default waarde de huidige datum (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefOnGeplandeStoringenVoorLijnrichting'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function geefOnGeplandeStoringenVoorLijnrichtingRequest($entiteitnummer, $lijnnummer, $richting, $datum = null, string $contentType = self::contentTypes['geefOnGeplandeStoringenVoorLijnrichting'][0])
    {

        // verify the required parameter 'entiteitnummer' is set
        if ($entiteitnummer === null || (is_array($entiteitnummer) && count($entiteitnummer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $entiteitnummer when calling geefOnGeplandeStoringenVoorLijnrichting'
            );
        }

        // verify the required parameter 'lijnnummer' is set
        if ($lijnnummer === null || (is_array($lijnnummer) && count($lijnnummer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lijnnummer when calling geefOnGeplandeStoringenVoorLijnrichting'
            );
        }

        // verify the required parameter 'richting' is set
        if ($richting === null || (is_array($richting) && count($richting) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $richting when calling geefOnGeplandeStoringenVoorLijnrichting'
            );
        }



        $resourcePath = '/lijnen/{entiteitnummer}/{lijnnummer}/lijnrichtingen/{richting}/storingen';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datum,
            'datum', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($entiteitnummer !== null) {
            $resourcePath = str_replace(
                '{' . 'entiteitnummer' . '}',
                ObjectSerializer::toPathValue($entiteitnummer),
                $resourcePath
            );
        }
        // path params
        if ($lijnnummer !== null) {
            $resourcePath = str_replace(
                '{' . 'lijnnummer' . '}',
                ObjectSerializer::toPathValue($lijnnummer),
                $resourcePath
            );
        }
        // path params
        if ($richting !== null) {
            $resourcePath = str_replace(
                '{' . 'richting' . '}',
                ObjectSerializer::toPathValue($richting),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Ocp-Apim-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation geefOnGeplandeStoringenVoorLijnrichtingenLijst
     *
     * geef de storingen voor de opgegeven lijst van lijnrichtingen
     *
     * @param  string $lijnrichtingsleutels lijst van lijnrichtingen (bv 1_500_HEEN_1_550_TERUG) (required)
     * @param  string $datum datum in formaat yyyy-MM-dd met als default waarde de huidige datum (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefOnGeplandeStoringenVoorLijnrichtingenLijst'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \District09\DeLijnCoreAPI\Model\Omleidingen
     */
    public function geefOnGeplandeStoringenVoorLijnrichtingenLijst($lijnrichtingsleutels, $datum = null, string $contentType = self::contentTypes['geefOnGeplandeStoringenVoorLijnrichtingenLijst'][0])
    {
        list($response) = $this->geefOnGeplandeStoringenVoorLijnrichtingenLijstWithHttpInfo($lijnrichtingsleutels, $datum, $contentType);
        return $response;
    }

    /**
     * Operation geefOnGeplandeStoringenVoorLijnrichtingenLijstWithHttpInfo
     *
     * geef de storingen voor de opgegeven lijst van lijnrichtingen
     *
     * @param  string $lijnrichtingsleutels lijst van lijnrichtingen (bv 1_500_HEEN_1_550_TERUG) (required)
     * @param  string $datum datum in formaat yyyy-MM-dd met als default waarde de huidige datum (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefOnGeplandeStoringenVoorLijnrichtingenLijst'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \District09\DeLijnCoreAPI\Model\Omleidingen, HTTP status code, HTTP response headers (array of strings)
     */
    public function geefOnGeplandeStoringenVoorLijnrichtingenLijstWithHttpInfo($lijnrichtingsleutels, $datum = null, string $contentType = self::contentTypes['geefOnGeplandeStoringenVoorLijnrichtingenLijst'][0])
    {
        $request = $this->geefOnGeplandeStoringenVoorLijnrichtingenLijstRequest($lijnrichtingsleutels, $datum, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\District09\DeLijnCoreAPI\Model\Omleidingen' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\District09\DeLijnCoreAPI\Model\Omleidingen' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\District09\DeLijnCoreAPI\Model\Omleidingen', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\District09\DeLijnCoreAPI\Model\Omleidingen';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\District09\DeLijnCoreAPI\Model\Omleidingen',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation geefOnGeplandeStoringenVoorLijnrichtingenLijstAsync
     *
     * geef de storingen voor de opgegeven lijst van lijnrichtingen
     *
     * @param  string $lijnrichtingsleutels lijst van lijnrichtingen (bv 1_500_HEEN_1_550_TERUG) (required)
     * @param  string $datum datum in formaat yyyy-MM-dd met als default waarde de huidige datum (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefOnGeplandeStoringenVoorLijnrichtingenLijst'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefOnGeplandeStoringenVoorLijnrichtingenLijstAsync($lijnrichtingsleutels, $datum = null, string $contentType = self::contentTypes['geefOnGeplandeStoringenVoorLijnrichtingenLijst'][0])
    {
        return $this->geefOnGeplandeStoringenVoorLijnrichtingenLijstAsyncWithHttpInfo($lijnrichtingsleutels, $datum, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation geefOnGeplandeStoringenVoorLijnrichtingenLijstAsyncWithHttpInfo
     *
     * geef de storingen voor de opgegeven lijst van lijnrichtingen
     *
     * @param  string $lijnrichtingsleutels lijst van lijnrichtingen (bv 1_500_HEEN_1_550_TERUG) (required)
     * @param  string $datum datum in formaat yyyy-MM-dd met als default waarde de huidige datum (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefOnGeplandeStoringenVoorLijnrichtingenLijst'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefOnGeplandeStoringenVoorLijnrichtingenLijstAsyncWithHttpInfo($lijnrichtingsleutels, $datum = null, string $contentType = self::contentTypes['geefOnGeplandeStoringenVoorLijnrichtingenLijst'][0])
    {
        $returnType = '\District09\DeLijnCoreAPI\Model\Omleidingen';
        $request = $this->geefOnGeplandeStoringenVoorLijnrichtingenLijstRequest($lijnrichtingsleutels, $datum, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'geefOnGeplandeStoringenVoorLijnrichtingenLijst'
     *
     * @param  string $lijnrichtingsleutels lijst van lijnrichtingen (bv 1_500_HEEN_1_550_TERUG) (required)
     * @param  string $datum datum in formaat yyyy-MM-dd met als default waarde de huidige datum (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefOnGeplandeStoringenVoorLijnrichtingenLijst'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function geefOnGeplandeStoringenVoorLijnrichtingenLijstRequest($lijnrichtingsleutels, $datum = null, string $contentType = self::contentTypes['geefOnGeplandeStoringenVoorLijnrichtingenLijst'][0])
    {

        // verify the required parameter 'lijnrichtingsleutels' is set
        if ($lijnrichtingsleutels === null || (is_array($lijnrichtingsleutels) && count($lijnrichtingsleutels) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lijnrichtingsleutels when calling geefOnGeplandeStoringenVoorLijnrichtingenLijst'
            );
        }



        $resourcePath = '/lijnen/lijst/{lijnrichtingsleutels}/storingen';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datum,
            'datum', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($lijnrichtingsleutels !== null) {
            $resourcePath = str_replace(
                '{' . 'lijnrichtingsleutels' . '}',
                ObjectSerializer::toPathValue($lijnrichtingsleutels),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Ocp-Apim-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation geefRitVoorLijnrichting
     *
     * geef rit(ten) voor de opgegeven lijnrichting
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  int $lijnnummer Format - int32. nummer van de lijn (required)
     * @param  string $richting richting van de lijn (required)
     * @param  string $ritnummer nummer van de rit (required)
     * @param  string $datum exploitatie datum in formaat yyyy-MM-dd met huidige datum als default (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefRitVoorLijnrichting'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \District09\DeLijnCoreAPI\Model\Ritten
     */
    public function geefRitVoorLijnrichting($entiteitnummer, $lijnnummer, $richting, $ritnummer, $datum = null, string $contentType = self::contentTypes['geefRitVoorLijnrichting'][0])
    {
        list($response) = $this->geefRitVoorLijnrichtingWithHttpInfo($entiteitnummer, $lijnnummer, $richting, $ritnummer, $datum, $contentType);
        return $response;
    }

    /**
     * Operation geefRitVoorLijnrichtingWithHttpInfo
     *
     * geef rit(ten) voor de opgegeven lijnrichting
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  int $lijnnummer Format - int32. nummer van de lijn (required)
     * @param  string $richting richting van de lijn (required)
     * @param  string $ritnummer nummer van de rit (required)
     * @param  string $datum exploitatie datum in formaat yyyy-MM-dd met huidige datum als default (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefRitVoorLijnrichting'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \District09\DeLijnCoreAPI\Model\Ritten, HTTP status code, HTTP response headers (array of strings)
     */
    public function geefRitVoorLijnrichtingWithHttpInfo($entiteitnummer, $lijnnummer, $richting, $ritnummer, $datum = null, string $contentType = self::contentTypes['geefRitVoorLijnrichting'][0])
    {
        $request = $this->geefRitVoorLijnrichtingRequest($entiteitnummer, $lijnnummer, $richting, $ritnummer, $datum, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\District09\DeLijnCoreAPI\Model\Ritten' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\District09\DeLijnCoreAPI\Model\Ritten' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\District09\DeLijnCoreAPI\Model\Ritten', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\District09\DeLijnCoreAPI\Model\Ritten';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\District09\DeLijnCoreAPI\Model\Ritten',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation geefRitVoorLijnrichtingAsync
     *
     * geef rit(ten) voor de opgegeven lijnrichting
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  int $lijnnummer Format - int32. nummer van de lijn (required)
     * @param  string $richting richting van de lijn (required)
     * @param  string $ritnummer nummer van de rit (required)
     * @param  string $datum exploitatie datum in formaat yyyy-MM-dd met huidige datum als default (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefRitVoorLijnrichting'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefRitVoorLijnrichtingAsync($entiteitnummer, $lijnnummer, $richting, $ritnummer, $datum = null, string $contentType = self::contentTypes['geefRitVoorLijnrichting'][0])
    {
        return $this->geefRitVoorLijnrichtingAsyncWithHttpInfo($entiteitnummer, $lijnnummer, $richting, $ritnummer, $datum, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation geefRitVoorLijnrichtingAsyncWithHttpInfo
     *
     * geef rit(ten) voor de opgegeven lijnrichting
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  int $lijnnummer Format - int32. nummer van de lijn (required)
     * @param  string $richting richting van de lijn (required)
     * @param  string $ritnummer nummer van de rit (required)
     * @param  string $datum exploitatie datum in formaat yyyy-MM-dd met huidige datum als default (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefRitVoorLijnrichting'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefRitVoorLijnrichtingAsyncWithHttpInfo($entiteitnummer, $lijnnummer, $richting, $ritnummer, $datum = null, string $contentType = self::contentTypes['geefRitVoorLijnrichting'][0])
    {
        $returnType = '\District09\DeLijnCoreAPI\Model\Ritten';
        $request = $this->geefRitVoorLijnrichtingRequest($entiteitnummer, $lijnnummer, $richting, $ritnummer, $datum, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'geefRitVoorLijnrichting'
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  int $lijnnummer Format - int32. nummer van de lijn (required)
     * @param  string $richting richting van de lijn (required)
     * @param  string $ritnummer nummer van de rit (required)
     * @param  string $datum exploitatie datum in formaat yyyy-MM-dd met huidige datum als default (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefRitVoorLijnrichting'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function geefRitVoorLijnrichtingRequest($entiteitnummer, $lijnnummer, $richting, $ritnummer, $datum = null, string $contentType = self::contentTypes['geefRitVoorLijnrichting'][0])
    {

        // verify the required parameter 'entiteitnummer' is set
        if ($entiteitnummer === null || (is_array($entiteitnummer) && count($entiteitnummer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $entiteitnummer when calling geefRitVoorLijnrichting'
            );
        }

        // verify the required parameter 'lijnnummer' is set
        if ($lijnnummer === null || (is_array($lijnnummer) && count($lijnnummer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $lijnnummer when calling geefRitVoorLijnrichting'
            );
        }

        // verify the required parameter 'richting' is set
        if ($richting === null || (is_array($richting) && count($richting) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $richting when calling geefRitVoorLijnrichting'
            );
        }

        // verify the required parameter 'ritnummer' is set
        if ($ritnummer === null || (is_array($ritnummer) && count($ritnummer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $ritnummer when calling geefRitVoorLijnrichting'
            );
        }



        $resourcePath = '/lijnen/{entiteitnummer}/{lijnnummer}/lijnrichtingen/{richting}/rit/{ritnummer}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datum,
            'datum', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($entiteitnummer !== null) {
            $resourcePath = str_replace(
                '{' . 'entiteitnummer' . '}',
                ObjectSerializer::toPathValue($entiteitnummer),
                $resourcePath
            );
        }
        // path params
        if ($lijnnummer !== null) {
            $resourcePath = str_replace(
                '{' . 'lijnnummer' . '}',
                ObjectSerializer::toPathValue($lijnnummer),
                $resourcePath
            );
        }
        // path params
        if ($richting !== null) {
            $resourcePath = str_replace(
                '{' . 'richting' . '}',
                ObjectSerializer::toPathValue($richting),
                $resourcePath
            );
        }
        // path params
        if ($ritnummer !== null) {
            $resourcePath = str_replace(
                '{' . 'ritnummer' . '}',
                ObjectSerializer::toPathValue($ritnummer),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Ocp-Apim-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
