<?php
/**
 * HaltesApi
 * PHP version 7.4
 *
 * @category Class
 * @package  District09\DeLijnCoreAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * De Lijn Kern Open Data Services (v1)
 *
 * Dit document beschrijft de kern operaties van de Open Data API (v1)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace District09\DeLijnCoreAPI\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use District09\DeLijnCoreAPI\ApiException;
use District09\DeLijnCoreAPI\Configuration;
use District09\DeLijnCoreAPI\HeaderSelector;
use District09\DeLijnCoreAPI\ObjectSerializer;

/**
 * HaltesApi Class Doc Comment
 *
 * @category Class
 * @package  District09\DeLijnCoreAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class HaltesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'geefDienstregelingVoorHalte' => [
            'application/json',
        ],
        'geefDienstregelingVoorHalteLijst' => [
            'application/json',
        ],
        'geefDoorkomstenVoorHalte' => [
            'application/json',
        ],
        'geefDoorkomstenVoorHalteLijst' => [
            'application/json',
        ],
        'geefHalte' => [
            'application/json',
        ],
        'geefHalteLijnrichtingenLijst' => [
            'application/json',
        ],
        'geefHalteLijst' => [
            'application/json',
        ],
        'geefHaltes' => [
            'application/json',
        ],
        'geefHaltesIndebuurt' => [
            'application/json',
        ],
        'geefLijnrichtingenVoorHalte' => [
            'application/json',
        ],
        'geefOmleidingenVoorHalte' => [
            'application/json',
        ],
        'geefOmleidingenVoorHalteLijst' => [
            'application/json',
        ],
        'geefStoringenVoorHalte' => [
            'application/json',
        ],
        'geefStoringenVoorHalteLijst' => [
            'application/json',
        ],
    ];

/**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation geefDienstregelingVoorHalte
     *
     * geef de dienstregeling voor de opgegeven halte
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  int $haltenummer Format - int32. nummer van de halte (required)
     * @param  string $datum datum in formaat yyyy-MM-dd met als default waarde de huidige datum (optional)
     * @param  bool $inclusief_ritnummer het ritnummer is gewenst in het resultaat (performance impact) (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefDienstregelingVoorHalte'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \District09\DeLijnCoreAPI\Model\Ritten
     */
    public function geefDienstregelingVoorHalte($entiteitnummer, $haltenummer, $datum = null, $inclusief_ritnummer = true, string $contentType = self::contentTypes['geefDienstregelingVoorHalte'][0])
    {
        list($response) = $this->geefDienstregelingVoorHalteWithHttpInfo($entiteitnummer, $haltenummer, $datum, $inclusief_ritnummer, $contentType);
        return $response;
    }

    /**
     * Operation geefDienstregelingVoorHalteWithHttpInfo
     *
     * geef de dienstregeling voor de opgegeven halte
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  int $haltenummer Format - int32. nummer van de halte (required)
     * @param  string $datum datum in formaat yyyy-MM-dd met als default waarde de huidige datum (optional)
     * @param  bool $inclusief_ritnummer het ritnummer is gewenst in het resultaat (performance impact) (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefDienstregelingVoorHalte'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \District09\DeLijnCoreAPI\Model\Ritten, HTTP status code, HTTP response headers (array of strings)
     */
    public function geefDienstregelingVoorHalteWithHttpInfo($entiteitnummer, $haltenummer, $datum = null, $inclusief_ritnummer = true, string $contentType = self::contentTypes['geefDienstregelingVoorHalte'][0])
    {
        $request = $this->geefDienstregelingVoorHalteRequest($entiteitnummer, $haltenummer, $datum, $inclusief_ritnummer, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\District09\DeLijnCoreAPI\Model\Ritten' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\District09\DeLijnCoreAPI\Model\Ritten' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\District09\DeLijnCoreAPI\Model\Ritten', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\District09\DeLijnCoreAPI\Model\Ritten';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\District09\DeLijnCoreAPI\Model\Ritten',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation geefDienstregelingVoorHalteAsync
     *
     * geef de dienstregeling voor de opgegeven halte
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  int $haltenummer Format - int32. nummer van de halte (required)
     * @param  string $datum datum in formaat yyyy-MM-dd met als default waarde de huidige datum (optional)
     * @param  bool $inclusief_ritnummer het ritnummer is gewenst in het resultaat (performance impact) (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefDienstregelingVoorHalte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefDienstregelingVoorHalteAsync($entiteitnummer, $haltenummer, $datum = null, $inclusief_ritnummer = true, string $contentType = self::contentTypes['geefDienstregelingVoorHalte'][0])
    {
        return $this->geefDienstregelingVoorHalteAsyncWithHttpInfo($entiteitnummer, $haltenummer, $datum, $inclusief_ritnummer, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation geefDienstregelingVoorHalteAsyncWithHttpInfo
     *
     * geef de dienstregeling voor de opgegeven halte
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  int $haltenummer Format - int32. nummer van de halte (required)
     * @param  string $datum datum in formaat yyyy-MM-dd met als default waarde de huidige datum (optional)
     * @param  bool $inclusief_ritnummer het ritnummer is gewenst in het resultaat (performance impact) (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefDienstregelingVoorHalte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefDienstregelingVoorHalteAsyncWithHttpInfo($entiteitnummer, $haltenummer, $datum = null, $inclusief_ritnummer = true, string $contentType = self::contentTypes['geefDienstregelingVoorHalte'][0])
    {
        $returnType = '\District09\DeLijnCoreAPI\Model\Ritten';
        $request = $this->geefDienstregelingVoorHalteRequest($entiteitnummer, $haltenummer, $datum, $inclusief_ritnummer, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'geefDienstregelingVoorHalte'
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  int $haltenummer Format - int32. nummer van de halte (required)
     * @param  string $datum datum in formaat yyyy-MM-dd met als default waarde de huidige datum (optional)
     * @param  bool $inclusief_ritnummer het ritnummer is gewenst in het resultaat (performance impact) (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefDienstregelingVoorHalte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function geefDienstregelingVoorHalteRequest($entiteitnummer, $haltenummer, $datum = null, $inclusief_ritnummer = true, string $contentType = self::contentTypes['geefDienstregelingVoorHalte'][0])
    {

        // verify the required parameter 'entiteitnummer' is set
        if ($entiteitnummer === null || (is_array($entiteitnummer) && count($entiteitnummer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $entiteitnummer when calling geefDienstregelingVoorHalte'
            );
        }

        // verify the required parameter 'haltenummer' is set
        if ($haltenummer === null || (is_array($haltenummer) && count($haltenummer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $haltenummer when calling geefDienstregelingVoorHalte'
            );
        }




        $resourcePath = '/haltes/{entiteitnummer}/{haltenummer}/dienstregelingen';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datum,
            'datum', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inclusief_ritnummer,
            'inclusiefRitnummer', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($entiteitnummer !== null) {
            $resourcePath = str_replace(
                '{' . 'entiteitnummer' . '}',
                ObjectSerializer::toPathValue($entiteitnummer),
                $resourcePath
            );
        }
        // path params
        if ($haltenummer !== null) {
            $resourcePath = str_replace(
                '{' . 'haltenummer' . '}',
                ObjectSerializer::toPathValue($haltenummer),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Ocp-Apim-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation geefDienstregelingVoorHalteLijst
     *
     * geef de dienstregeling voor de opgegeven halte sleutels
     *
     * @param  string $haltesleutels lijst van halte sleutels (bv 1_201302_5_5024541) (required)
     * @param  string $datum datum in formaat yyyy-MM-dd met als default waarde de huidige datum (optional)
     * @param  bool $inclusief_ritnummer het ritnummer is gewenst in het resultaat (performance impact) (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefDienstregelingVoorHalteLijst'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \District09\DeLijnCoreAPI\Model\HalteDoorkomstenLijst
     */
    public function geefDienstregelingVoorHalteLijst($haltesleutels, $datum = null, $inclusief_ritnummer = true, string $contentType = self::contentTypes['geefDienstregelingVoorHalteLijst'][0])
    {
        list($response) = $this->geefDienstregelingVoorHalteLijstWithHttpInfo($haltesleutels, $datum, $inclusief_ritnummer, $contentType);
        return $response;
    }

    /**
     * Operation geefDienstregelingVoorHalteLijstWithHttpInfo
     *
     * geef de dienstregeling voor de opgegeven halte sleutels
     *
     * @param  string $haltesleutels lijst van halte sleutels (bv 1_201302_5_5024541) (required)
     * @param  string $datum datum in formaat yyyy-MM-dd met als default waarde de huidige datum (optional)
     * @param  bool $inclusief_ritnummer het ritnummer is gewenst in het resultaat (performance impact) (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefDienstregelingVoorHalteLijst'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \District09\DeLijnCoreAPI\Model\HalteDoorkomstenLijst, HTTP status code, HTTP response headers (array of strings)
     */
    public function geefDienstregelingVoorHalteLijstWithHttpInfo($haltesleutels, $datum = null, $inclusief_ritnummer = true, string $contentType = self::contentTypes['geefDienstregelingVoorHalteLijst'][0])
    {
        $request = $this->geefDienstregelingVoorHalteLijstRequest($haltesleutels, $datum, $inclusief_ritnummer, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\District09\DeLijnCoreAPI\Model\HalteDoorkomstenLijst' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\District09\DeLijnCoreAPI\Model\HalteDoorkomstenLijst' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\District09\DeLijnCoreAPI\Model\HalteDoorkomstenLijst', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\District09\DeLijnCoreAPI\Model\HalteDoorkomstenLijst';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\District09\DeLijnCoreAPI\Model\HalteDoorkomstenLijst',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation geefDienstregelingVoorHalteLijstAsync
     *
     * geef de dienstregeling voor de opgegeven halte sleutels
     *
     * @param  string $haltesleutels lijst van halte sleutels (bv 1_201302_5_5024541) (required)
     * @param  string $datum datum in formaat yyyy-MM-dd met als default waarde de huidige datum (optional)
     * @param  bool $inclusief_ritnummer het ritnummer is gewenst in het resultaat (performance impact) (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefDienstregelingVoorHalteLijst'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefDienstregelingVoorHalteLijstAsync($haltesleutels, $datum = null, $inclusief_ritnummer = true, string $contentType = self::contentTypes['geefDienstregelingVoorHalteLijst'][0])
    {
        return $this->geefDienstregelingVoorHalteLijstAsyncWithHttpInfo($haltesleutels, $datum, $inclusief_ritnummer, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation geefDienstregelingVoorHalteLijstAsyncWithHttpInfo
     *
     * geef de dienstregeling voor de opgegeven halte sleutels
     *
     * @param  string $haltesleutels lijst van halte sleutels (bv 1_201302_5_5024541) (required)
     * @param  string $datum datum in formaat yyyy-MM-dd met als default waarde de huidige datum (optional)
     * @param  bool $inclusief_ritnummer het ritnummer is gewenst in het resultaat (performance impact) (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefDienstregelingVoorHalteLijst'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefDienstregelingVoorHalteLijstAsyncWithHttpInfo($haltesleutels, $datum = null, $inclusief_ritnummer = true, string $contentType = self::contentTypes['geefDienstregelingVoorHalteLijst'][0])
    {
        $returnType = '\District09\DeLijnCoreAPI\Model\HalteDoorkomstenLijst';
        $request = $this->geefDienstregelingVoorHalteLijstRequest($haltesleutels, $datum, $inclusief_ritnummer, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'geefDienstregelingVoorHalteLijst'
     *
     * @param  string $haltesleutels lijst van halte sleutels (bv 1_201302_5_5024541) (required)
     * @param  string $datum datum in formaat yyyy-MM-dd met als default waarde de huidige datum (optional)
     * @param  bool $inclusief_ritnummer het ritnummer is gewenst in het resultaat (performance impact) (optional, default to true)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefDienstregelingVoorHalteLijst'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function geefDienstregelingVoorHalteLijstRequest($haltesleutels, $datum = null, $inclusief_ritnummer = true, string $contentType = self::contentTypes['geefDienstregelingVoorHalteLijst'][0])
    {

        // verify the required parameter 'haltesleutels' is set
        if ($haltesleutels === null || (is_array($haltesleutels) && count($haltesleutels) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $haltesleutels when calling geefDienstregelingVoorHalteLijst'
            );
        }




        $resourcePath = '/haltes/lijst/{haltesleutels}/dienstregelingen';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datum,
            'datum', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inclusief_ritnummer,
            'inclusiefRitnummer', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($haltesleutels !== null) {
            $resourcePath = str_replace(
                '{' . 'haltesleutels' . '}',
                ObjectSerializer::toPathValue($haltesleutels),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Ocp-Apim-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation geefDoorkomstenVoorHalte
     *
     * geef de real-time doorkomsten voor de opgegeven halte
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  int $haltenummer Format - int32. nummer van de halte (required)
     * @param  int $max_aantal_doorkomsten Format - int32. maximaal aantal doorkomsten voor de opgegeven halte (optional, default to 10)
     * @param  string $ocp_apim_subscription_key ocp_apim_subscription_key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefDoorkomstenVoorHalte'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \District09\DeLijnCoreAPI\Model\Ritten
     */
    public function geefDoorkomstenVoorHalte($entiteitnummer, $haltenummer, $max_aantal_doorkomsten = 10, $ocp_apim_subscription_key = null, string $contentType = self::contentTypes['geefDoorkomstenVoorHalte'][0])
    {
        list($response) = $this->geefDoorkomstenVoorHalteWithHttpInfo($entiteitnummer, $haltenummer, $max_aantal_doorkomsten, $ocp_apim_subscription_key, $contentType);
        return $response;
    }

    /**
     * Operation geefDoorkomstenVoorHalteWithHttpInfo
     *
     * geef de real-time doorkomsten voor de opgegeven halte
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  int $haltenummer Format - int32. nummer van de halte (required)
     * @param  int $max_aantal_doorkomsten Format - int32. maximaal aantal doorkomsten voor de opgegeven halte (optional, default to 10)
     * @param  string $ocp_apim_subscription_key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefDoorkomstenVoorHalte'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \District09\DeLijnCoreAPI\Model\Ritten, HTTP status code, HTTP response headers (array of strings)
     */
    public function geefDoorkomstenVoorHalteWithHttpInfo($entiteitnummer, $haltenummer, $max_aantal_doorkomsten = 10, $ocp_apim_subscription_key = null, string $contentType = self::contentTypes['geefDoorkomstenVoorHalte'][0])
    {
        $request = $this->geefDoorkomstenVoorHalteRequest($entiteitnummer, $haltenummer, $max_aantal_doorkomsten, $ocp_apim_subscription_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\District09\DeLijnCoreAPI\Model\Ritten' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\District09\DeLijnCoreAPI\Model\Ritten' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\District09\DeLijnCoreAPI\Model\Ritten', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\District09\DeLijnCoreAPI\Model\Ritten';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\District09\DeLijnCoreAPI\Model\Ritten',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation geefDoorkomstenVoorHalteAsync
     *
     * geef de real-time doorkomsten voor de opgegeven halte
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  int $haltenummer Format - int32. nummer van de halte (required)
     * @param  int $max_aantal_doorkomsten Format - int32. maximaal aantal doorkomsten voor de opgegeven halte (optional, default to 10)
     * @param  string $ocp_apim_subscription_key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefDoorkomstenVoorHalte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefDoorkomstenVoorHalteAsync($entiteitnummer, $haltenummer, $max_aantal_doorkomsten = 10, $ocp_apim_subscription_key = null, string $contentType = self::contentTypes['geefDoorkomstenVoorHalte'][0])
    {
        return $this->geefDoorkomstenVoorHalteAsyncWithHttpInfo($entiteitnummer, $haltenummer, $max_aantal_doorkomsten, $ocp_apim_subscription_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation geefDoorkomstenVoorHalteAsyncWithHttpInfo
     *
     * geef de real-time doorkomsten voor de opgegeven halte
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  int $haltenummer Format - int32. nummer van de halte (required)
     * @param  int $max_aantal_doorkomsten Format - int32. maximaal aantal doorkomsten voor de opgegeven halte (optional, default to 10)
     * @param  string $ocp_apim_subscription_key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefDoorkomstenVoorHalte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefDoorkomstenVoorHalteAsyncWithHttpInfo($entiteitnummer, $haltenummer, $max_aantal_doorkomsten = 10, $ocp_apim_subscription_key = null, string $contentType = self::contentTypes['geefDoorkomstenVoorHalte'][0])
    {
        $returnType = '\District09\DeLijnCoreAPI\Model\Ritten';
        $request = $this->geefDoorkomstenVoorHalteRequest($entiteitnummer, $haltenummer, $max_aantal_doorkomsten, $ocp_apim_subscription_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'geefDoorkomstenVoorHalte'
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  int $haltenummer Format - int32. nummer van de halte (required)
     * @param  int $max_aantal_doorkomsten Format - int32. maximaal aantal doorkomsten voor de opgegeven halte (optional, default to 10)
     * @param  string $ocp_apim_subscription_key (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefDoorkomstenVoorHalte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function geefDoorkomstenVoorHalteRequest($entiteitnummer, $haltenummer, $max_aantal_doorkomsten = 10, $ocp_apim_subscription_key = null, string $contentType = self::contentTypes['geefDoorkomstenVoorHalte'][0])
    {

        // verify the required parameter 'entiteitnummer' is set
        if ($entiteitnummer === null || (is_array($entiteitnummer) && count($entiteitnummer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $entiteitnummer when calling geefDoorkomstenVoorHalte'
            );
        }

        // verify the required parameter 'haltenummer' is set
        if ($haltenummer === null || (is_array($haltenummer) && count($haltenummer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $haltenummer when calling geefDoorkomstenVoorHalte'
            );
        }




        $resourcePath = '/haltes/{entiteitnummer}/{haltenummer}/real-time';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_aantal_doorkomsten,
            'maxAantalDoorkomsten', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);

        // header params
        if ($ocp_apim_subscription_key !== null) {
            $headerParams['Ocp-Apim-Subscription-Key'] = ObjectSerializer::toHeaderValue($ocp_apim_subscription_key);
        }

        // path params
        if ($entiteitnummer !== null) {
            $resourcePath = str_replace(
                '{' . 'entiteitnummer' . '}',
                ObjectSerializer::toPathValue($entiteitnummer),
                $resourcePath
            );
        }
        // path params
        if ($haltenummer !== null) {
            $resourcePath = str_replace(
                '{' . 'haltenummer' . '}',
                ObjectSerializer::toPathValue($haltenummer),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Ocp-Apim-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation geefDoorkomstenVoorHalteLijst
     *
     * geef de real-time doorkomsten voor de opgegeven halte sleutels
     *
     * @param  string $haltesleutels lijst van halte sleutels (bv 1_201302_5_5024541) (required)
     * @param  int $max_aantal_doorkomsten Format - int32. maximaal aantal doorkomsten voor de opgegeven halte (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefDoorkomstenVoorHalteLijst'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \District09\DeLijnCoreAPI\Model\HalteDoorkomstenLijst
     */
    public function geefDoorkomstenVoorHalteLijst($haltesleutels, $max_aantal_doorkomsten = 10, string $contentType = self::contentTypes['geefDoorkomstenVoorHalteLijst'][0])
    {
        list($response) = $this->geefDoorkomstenVoorHalteLijstWithHttpInfo($haltesleutels, $max_aantal_doorkomsten, $contentType);
        return $response;
    }

    /**
     * Operation geefDoorkomstenVoorHalteLijstWithHttpInfo
     *
     * geef de real-time doorkomsten voor de opgegeven halte sleutels
     *
     * @param  string $haltesleutels lijst van halte sleutels (bv 1_201302_5_5024541) (required)
     * @param  int $max_aantal_doorkomsten Format - int32. maximaal aantal doorkomsten voor de opgegeven halte (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefDoorkomstenVoorHalteLijst'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \District09\DeLijnCoreAPI\Model\HalteDoorkomstenLijst, HTTP status code, HTTP response headers (array of strings)
     */
    public function geefDoorkomstenVoorHalteLijstWithHttpInfo($haltesleutels, $max_aantal_doorkomsten = 10, string $contentType = self::contentTypes['geefDoorkomstenVoorHalteLijst'][0])
    {
        $request = $this->geefDoorkomstenVoorHalteLijstRequest($haltesleutels, $max_aantal_doorkomsten, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\District09\DeLijnCoreAPI\Model\HalteDoorkomstenLijst' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\District09\DeLijnCoreAPI\Model\HalteDoorkomstenLijst' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\District09\DeLijnCoreAPI\Model\HalteDoorkomstenLijst', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\District09\DeLijnCoreAPI\Model\HalteDoorkomstenLijst';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\District09\DeLijnCoreAPI\Model\HalteDoorkomstenLijst',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation geefDoorkomstenVoorHalteLijstAsync
     *
     * geef de real-time doorkomsten voor de opgegeven halte sleutels
     *
     * @param  string $haltesleutels lijst van halte sleutels (bv 1_201302_5_5024541) (required)
     * @param  int $max_aantal_doorkomsten Format - int32. maximaal aantal doorkomsten voor de opgegeven halte (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefDoorkomstenVoorHalteLijst'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefDoorkomstenVoorHalteLijstAsync($haltesleutels, $max_aantal_doorkomsten = 10, string $contentType = self::contentTypes['geefDoorkomstenVoorHalteLijst'][0])
    {
        return $this->geefDoorkomstenVoorHalteLijstAsyncWithHttpInfo($haltesleutels, $max_aantal_doorkomsten, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation geefDoorkomstenVoorHalteLijstAsyncWithHttpInfo
     *
     * geef de real-time doorkomsten voor de opgegeven halte sleutels
     *
     * @param  string $haltesleutels lijst van halte sleutels (bv 1_201302_5_5024541) (required)
     * @param  int $max_aantal_doorkomsten Format - int32. maximaal aantal doorkomsten voor de opgegeven halte (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefDoorkomstenVoorHalteLijst'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefDoorkomstenVoorHalteLijstAsyncWithHttpInfo($haltesleutels, $max_aantal_doorkomsten = 10, string $contentType = self::contentTypes['geefDoorkomstenVoorHalteLijst'][0])
    {
        $returnType = '\District09\DeLijnCoreAPI\Model\HalteDoorkomstenLijst';
        $request = $this->geefDoorkomstenVoorHalteLijstRequest($haltesleutels, $max_aantal_doorkomsten, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'geefDoorkomstenVoorHalteLijst'
     *
     * @param  string $haltesleutels lijst van halte sleutels (bv 1_201302_5_5024541) (required)
     * @param  int $max_aantal_doorkomsten Format - int32. maximaal aantal doorkomsten voor de opgegeven halte (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefDoorkomstenVoorHalteLijst'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function geefDoorkomstenVoorHalteLijstRequest($haltesleutels, $max_aantal_doorkomsten = 10, string $contentType = self::contentTypes['geefDoorkomstenVoorHalteLijst'][0])
    {

        // verify the required parameter 'haltesleutels' is set
        if ($haltesleutels === null || (is_array($haltesleutels) && count($haltesleutels) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $haltesleutels when calling geefDoorkomstenVoorHalteLijst'
            );
        }



        $resourcePath = '/haltes/lijst/{haltesleutels}/real-time';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_aantal_doorkomsten,
            'maxAantalDoorkomsten', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($haltesleutels !== null) {
            $resourcePath = str_replace(
                '{' . 'haltesleutels' . '}',
                ObjectSerializer::toPathValue($haltesleutels),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Ocp-Apim-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation geefHalte
     *
     * geef een halte op basis van het opgegeven haltenummer
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  int $haltenummer Format - int32. nummer van de entiteit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefHalte'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \District09\DeLijnCoreAPI\Model\Halte
     */
    public function geefHalte($entiteitnummer, $haltenummer, string $contentType = self::contentTypes['geefHalte'][0])
    {
        list($response) = $this->geefHalteWithHttpInfo($entiteitnummer, $haltenummer, $contentType);
        return $response;
    }

    /**
     * Operation geefHalteWithHttpInfo
     *
     * geef een halte op basis van het opgegeven haltenummer
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  int $haltenummer Format - int32. nummer van de entiteit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefHalte'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \District09\DeLijnCoreAPI\Model\Halte, HTTP status code, HTTP response headers (array of strings)
     */
    public function geefHalteWithHttpInfo($entiteitnummer, $haltenummer, string $contentType = self::contentTypes['geefHalte'][0])
    {
        $request = $this->geefHalteRequest($entiteitnummer, $haltenummer, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\District09\DeLijnCoreAPI\Model\Halte' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\District09\DeLijnCoreAPI\Model\Halte' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\District09\DeLijnCoreAPI\Model\Halte', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\District09\DeLijnCoreAPI\Model\Halte';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\District09\DeLijnCoreAPI\Model\Halte',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation geefHalteAsync
     *
     * geef een halte op basis van het opgegeven haltenummer
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  int $haltenummer Format - int32. nummer van de entiteit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefHalte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefHalteAsync($entiteitnummer, $haltenummer, string $contentType = self::contentTypes['geefHalte'][0])
    {
        return $this->geefHalteAsyncWithHttpInfo($entiteitnummer, $haltenummer, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation geefHalteAsyncWithHttpInfo
     *
     * geef een halte op basis van het opgegeven haltenummer
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  int $haltenummer Format - int32. nummer van de entiteit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefHalte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefHalteAsyncWithHttpInfo($entiteitnummer, $haltenummer, string $contentType = self::contentTypes['geefHalte'][0])
    {
        $returnType = '\District09\DeLijnCoreAPI\Model\Halte';
        $request = $this->geefHalteRequest($entiteitnummer, $haltenummer, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'geefHalte'
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  int $haltenummer Format - int32. nummer van de entiteit (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefHalte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function geefHalteRequest($entiteitnummer, $haltenummer, string $contentType = self::contentTypes['geefHalte'][0])
    {

        // verify the required parameter 'entiteitnummer' is set
        if ($entiteitnummer === null || (is_array($entiteitnummer) && count($entiteitnummer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $entiteitnummer when calling geefHalte'
            );
        }

        // verify the required parameter 'haltenummer' is set
        if ($haltenummer === null || (is_array($haltenummer) && count($haltenummer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $haltenummer when calling geefHalte'
            );
        }


        $resourcePath = '/haltes/{entiteitnummer}/{haltenummer}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($entiteitnummer !== null) {
            $resourcePath = str_replace(
                '{' . 'entiteitnummer' . '}',
                ObjectSerializer::toPathValue($entiteitnummer),
                $resourcePath
            );
        }
        // path params
        if ($haltenummer !== null) {
            $resourcePath = str_replace(
                '{' . 'haltenummer' . '}',
                ObjectSerializer::toPathValue($haltenummer),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Ocp-Apim-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation geefHalteLijnrichtingenLijst
     *
     * geef de lijnrichtingen die de opgegeven halte bedienen op basis van een lijst van halte sleutels
     *
     * @param  string $haltesleutels lijst van halte sleutels (bv 1_201302_5_5024541) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefHalteLijnrichtingenLijst'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \District09\DeLijnCoreAPI\Model\Lijnrichtingen
     */
    public function geefHalteLijnrichtingenLijst($haltesleutels, string $contentType = self::contentTypes['geefHalteLijnrichtingenLijst'][0])
    {
        list($response) = $this->geefHalteLijnrichtingenLijstWithHttpInfo($haltesleutels, $contentType);
        return $response;
    }

    /**
     * Operation geefHalteLijnrichtingenLijstWithHttpInfo
     *
     * geef de lijnrichtingen die de opgegeven halte bedienen op basis van een lijst van halte sleutels
     *
     * @param  string $haltesleutels lijst van halte sleutels (bv 1_201302_5_5024541) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefHalteLijnrichtingenLijst'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \District09\DeLijnCoreAPI\Model\Lijnrichtingen, HTTP status code, HTTP response headers (array of strings)
     */
    public function geefHalteLijnrichtingenLijstWithHttpInfo($haltesleutels, string $contentType = self::contentTypes['geefHalteLijnrichtingenLijst'][0])
    {
        $request = $this->geefHalteLijnrichtingenLijstRequest($haltesleutels, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\District09\DeLijnCoreAPI\Model\Lijnrichtingen' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\District09\DeLijnCoreAPI\Model\Lijnrichtingen' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\District09\DeLijnCoreAPI\Model\Lijnrichtingen', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\District09\DeLijnCoreAPI\Model\Lijnrichtingen';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\District09\DeLijnCoreAPI\Model\Lijnrichtingen',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation geefHalteLijnrichtingenLijstAsync
     *
     * geef de lijnrichtingen die de opgegeven halte bedienen op basis van een lijst van halte sleutels
     *
     * @param  string $haltesleutels lijst van halte sleutels (bv 1_201302_5_5024541) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefHalteLijnrichtingenLijst'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefHalteLijnrichtingenLijstAsync($haltesleutels, string $contentType = self::contentTypes['geefHalteLijnrichtingenLijst'][0])
    {
        return $this->geefHalteLijnrichtingenLijstAsyncWithHttpInfo($haltesleutels, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation geefHalteLijnrichtingenLijstAsyncWithHttpInfo
     *
     * geef de lijnrichtingen die de opgegeven halte bedienen op basis van een lijst van halte sleutels
     *
     * @param  string $haltesleutels lijst van halte sleutels (bv 1_201302_5_5024541) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefHalteLijnrichtingenLijst'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefHalteLijnrichtingenLijstAsyncWithHttpInfo($haltesleutels, string $contentType = self::contentTypes['geefHalteLijnrichtingenLijst'][0])
    {
        $returnType = '\District09\DeLijnCoreAPI\Model\Lijnrichtingen';
        $request = $this->geefHalteLijnrichtingenLijstRequest($haltesleutels, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'geefHalteLijnrichtingenLijst'
     *
     * @param  string $haltesleutels lijst van halte sleutels (bv 1_201302_5_5024541) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefHalteLijnrichtingenLijst'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function geefHalteLijnrichtingenLijstRequest($haltesleutels, string $contentType = self::contentTypes['geefHalteLijnrichtingenLijst'][0])
    {

        // verify the required parameter 'haltesleutels' is set
        if ($haltesleutels === null || (is_array($haltesleutels) && count($haltesleutels) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $haltesleutels when calling geefHalteLijnrichtingenLijst'
            );
        }


        $resourcePath = '/haltes/lijst/{haltesleutels}/lijnrichtingen';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($haltesleutels !== null) {
            $resourcePath = str_replace(
                '{' . 'haltesleutels' . '}',
                ObjectSerializer::toPathValue($haltesleutels),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Ocp-Apim-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation geefHalteLijst
     *
     * geef een lijst van haltes op basis van een lijst van halte sleutels
     *
     * @param  string $haltesleutels lijst van halte sleutels (bv 1_201302_5_5024541) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefHalteLijst'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \District09\DeLijnCoreAPI\Model\Haltes
     */
    public function geefHalteLijst($haltesleutels, string $contentType = self::contentTypes['geefHalteLijst'][0])
    {
        list($response) = $this->geefHalteLijstWithHttpInfo($haltesleutels, $contentType);
        return $response;
    }

    /**
     * Operation geefHalteLijstWithHttpInfo
     *
     * geef een lijst van haltes op basis van een lijst van halte sleutels
     *
     * @param  string $haltesleutels lijst van halte sleutels (bv 1_201302_5_5024541) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefHalteLijst'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \District09\DeLijnCoreAPI\Model\Haltes, HTTP status code, HTTP response headers (array of strings)
     */
    public function geefHalteLijstWithHttpInfo($haltesleutels, string $contentType = self::contentTypes['geefHalteLijst'][0])
    {
        $request = $this->geefHalteLijstRequest($haltesleutels, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\District09\DeLijnCoreAPI\Model\Haltes' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\District09\DeLijnCoreAPI\Model\Haltes' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\District09\DeLijnCoreAPI\Model\Haltes', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\District09\DeLijnCoreAPI\Model\Haltes';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\District09\DeLijnCoreAPI\Model\Haltes',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation geefHalteLijstAsync
     *
     * geef een lijst van haltes op basis van een lijst van halte sleutels
     *
     * @param  string $haltesleutels lijst van halte sleutels (bv 1_201302_5_5024541) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefHalteLijst'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefHalteLijstAsync($haltesleutels, string $contentType = self::contentTypes['geefHalteLijst'][0])
    {
        return $this->geefHalteLijstAsyncWithHttpInfo($haltesleutels, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation geefHalteLijstAsyncWithHttpInfo
     *
     * geef een lijst van haltes op basis van een lijst van halte sleutels
     *
     * @param  string $haltesleutels lijst van halte sleutels (bv 1_201302_5_5024541) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefHalteLijst'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefHalteLijstAsyncWithHttpInfo($haltesleutels, string $contentType = self::contentTypes['geefHalteLijst'][0])
    {
        $returnType = '\District09\DeLijnCoreAPI\Model\Haltes';
        $request = $this->geefHalteLijstRequest($haltesleutels, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'geefHalteLijst'
     *
     * @param  string $haltesleutels lijst van halte sleutels (bv 1_201302_5_5024541) (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefHalteLijst'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function geefHalteLijstRequest($haltesleutels, string $contentType = self::contentTypes['geefHalteLijst'][0])
    {

        // verify the required parameter 'haltesleutels' is set
        if ($haltesleutels === null || (is_array($haltesleutels) && count($haltesleutels) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $haltesleutels when calling geefHalteLijst'
            );
        }


        $resourcePath = '/haltes/lijst/{haltesleutels}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($haltesleutels !== null) {
            $resourcePath = str_replace(
                '{' . 'haltesleutels' . '}',
                ObjectSerializer::toPathValue($haltesleutels),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Ocp-Apim-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation geefHaltes
     *
     * geef alle haltes
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefHaltes'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \District09\DeLijnCoreAPI\Model\Haltes
     */
    public function geefHaltes(string $contentType = self::contentTypes['geefHaltes'][0])
    {
        list($response) = $this->geefHaltesWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation geefHaltesWithHttpInfo
     *
     * geef alle haltes
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefHaltes'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \District09\DeLijnCoreAPI\Model\Haltes, HTTP status code, HTTP response headers (array of strings)
     */
    public function geefHaltesWithHttpInfo(string $contentType = self::contentTypes['geefHaltes'][0])
    {
        $request = $this->geefHaltesRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\District09\DeLijnCoreAPI\Model\Haltes' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\District09\DeLijnCoreAPI\Model\Haltes' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\District09\DeLijnCoreAPI\Model\Haltes', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\District09\DeLijnCoreAPI\Model\Haltes';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\District09\DeLijnCoreAPI\Model\Haltes',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation geefHaltesAsync
     *
     * geef alle haltes
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefHaltes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefHaltesAsync(string $contentType = self::contentTypes['geefHaltes'][0])
    {
        return $this->geefHaltesAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation geefHaltesAsyncWithHttpInfo
     *
     * geef alle haltes
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefHaltes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefHaltesAsyncWithHttpInfo(string $contentType = self::contentTypes['geefHaltes'][0])
    {
        $returnType = '\District09\DeLijnCoreAPI\Model\Haltes';
        $request = $this->geefHaltesRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'geefHaltes'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefHaltes'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function geefHaltesRequest(string $contentType = self::contentTypes['geefHaltes'][0])
    {


        $resourcePath = '/haltes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Ocp-Apim-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation geefHaltesIndebuurt
     *
     * geef de haltes van de verschillende vervoersmaatschappijen in de buurt van de opgegeven coordinaten
     *
     * @param  string $latlng latitude en longitude gescheiden door komma bv, 51.056064,3.797336 (required)
     * @param  int $radius Format - int32. de radius in meters binnen de welke naar haltes gezocht wordt (optional, default to 750)
     * @param  int $max_aantal_haltes Format - int32. het maximaal aantal haltes die van de operatie verwacht wordt (optional, default to 999)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefHaltesIndebuurt'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \District09\DeLijnCoreAPI\Model\Punten
     */
    public function geefHaltesIndebuurt($latlng, $radius = 750, $max_aantal_haltes = 999, string $contentType = self::contentTypes['geefHaltesIndebuurt'][0])
    {
        list($response) = $this->geefHaltesIndebuurtWithHttpInfo($latlng, $radius, $max_aantal_haltes, $contentType);
        return $response;
    }

    /**
     * Operation geefHaltesIndebuurtWithHttpInfo
     *
     * geef de haltes van de verschillende vervoersmaatschappijen in de buurt van de opgegeven coordinaten
     *
     * @param  string $latlng latitude en longitude gescheiden door komma bv, 51.056064,3.797336 (required)
     * @param  int $radius Format - int32. de radius in meters binnen de welke naar haltes gezocht wordt (optional, default to 750)
     * @param  int $max_aantal_haltes Format - int32. het maximaal aantal haltes die van de operatie verwacht wordt (optional, default to 999)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefHaltesIndebuurt'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \District09\DeLijnCoreAPI\Model\Punten, HTTP status code, HTTP response headers (array of strings)
     */
    public function geefHaltesIndebuurtWithHttpInfo($latlng, $radius = 750, $max_aantal_haltes = 999, string $contentType = self::contentTypes['geefHaltesIndebuurt'][0])
    {
        $request = $this->geefHaltesIndebuurtRequest($latlng, $radius, $max_aantal_haltes, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\District09\DeLijnCoreAPI\Model\Punten' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\District09\DeLijnCoreAPI\Model\Punten' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\District09\DeLijnCoreAPI\Model\Punten', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\District09\DeLijnCoreAPI\Model\Punten';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\District09\DeLijnCoreAPI\Model\Punten',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation geefHaltesIndebuurtAsync
     *
     * geef de haltes van de verschillende vervoersmaatschappijen in de buurt van de opgegeven coordinaten
     *
     * @param  string $latlng latitude en longitude gescheiden door komma bv, 51.056064,3.797336 (required)
     * @param  int $radius Format - int32. de radius in meters binnen de welke naar haltes gezocht wordt (optional, default to 750)
     * @param  int $max_aantal_haltes Format - int32. het maximaal aantal haltes die van de operatie verwacht wordt (optional, default to 999)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefHaltesIndebuurt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefHaltesIndebuurtAsync($latlng, $radius = 750, $max_aantal_haltes = 999, string $contentType = self::contentTypes['geefHaltesIndebuurt'][0])
    {
        return $this->geefHaltesIndebuurtAsyncWithHttpInfo($latlng, $radius, $max_aantal_haltes, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation geefHaltesIndebuurtAsyncWithHttpInfo
     *
     * geef de haltes van de verschillende vervoersmaatschappijen in de buurt van de opgegeven coordinaten
     *
     * @param  string $latlng latitude en longitude gescheiden door komma bv, 51.056064,3.797336 (required)
     * @param  int $radius Format - int32. de radius in meters binnen de welke naar haltes gezocht wordt (optional, default to 750)
     * @param  int $max_aantal_haltes Format - int32. het maximaal aantal haltes die van de operatie verwacht wordt (optional, default to 999)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefHaltesIndebuurt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefHaltesIndebuurtAsyncWithHttpInfo($latlng, $radius = 750, $max_aantal_haltes = 999, string $contentType = self::contentTypes['geefHaltesIndebuurt'][0])
    {
        $returnType = '\District09\DeLijnCoreAPI\Model\Punten';
        $request = $this->geefHaltesIndebuurtRequest($latlng, $radius, $max_aantal_haltes, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'geefHaltesIndebuurt'
     *
     * @param  string $latlng latitude en longitude gescheiden door komma bv, 51.056064,3.797336 (required)
     * @param  int $radius Format - int32. de radius in meters binnen de welke naar haltes gezocht wordt (optional, default to 750)
     * @param  int $max_aantal_haltes Format - int32. het maximaal aantal haltes die van de operatie verwacht wordt (optional, default to 999)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefHaltesIndebuurt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function geefHaltesIndebuurtRequest($latlng, $radius = 750, $max_aantal_haltes = 999, string $contentType = self::contentTypes['geefHaltesIndebuurt'][0])
    {

        // verify the required parameter 'latlng' is set
        if ($latlng === null || (is_array($latlng) && count($latlng) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $latlng when calling geefHaltesIndebuurt'
            );
        }




        $resourcePath = '/haltes/indebuurt/{latlng}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $radius,
            'radius', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_aantal_haltes,
            'maxAantalHaltes', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($latlng !== null) {
            $resourcePath = str_replace(
                '{' . 'latlng' . '}',
                ObjectSerializer::toPathValue($latlng),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Ocp-Apim-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation geefLijnrichtingenVoorHalte
     *
     * geef de lijnrichtingen die de opgegeven halte bedienen
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  int $haltenummer Format - int32. nummer van de halte (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefLijnrichtingenVoorHalte'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \District09\DeLijnCoreAPI\Model\Lijnrichtingen
     */
    public function geefLijnrichtingenVoorHalte($entiteitnummer, $haltenummer, string $contentType = self::contentTypes['geefLijnrichtingenVoorHalte'][0])
    {
        list($response) = $this->geefLijnrichtingenVoorHalteWithHttpInfo($entiteitnummer, $haltenummer, $contentType);
        return $response;
    }

    /**
     * Operation geefLijnrichtingenVoorHalteWithHttpInfo
     *
     * geef de lijnrichtingen die de opgegeven halte bedienen
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  int $haltenummer Format - int32. nummer van de halte (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefLijnrichtingenVoorHalte'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \District09\DeLijnCoreAPI\Model\Lijnrichtingen, HTTP status code, HTTP response headers (array of strings)
     */
    public function geefLijnrichtingenVoorHalteWithHttpInfo($entiteitnummer, $haltenummer, string $contentType = self::contentTypes['geefLijnrichtingenVoorHalte'][0])
    {
        $request = $this->geefLijnrichtingenVoorHalteRequest($entiteitnummer, $haltenummer, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\District09\DeLijnCoreAPI\Model\Lijnrichtingen' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\District09\DeLijnCoreAPI\Model\Lijnrichtingen' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\District09\DeLijnCoreAPI\Model\Lijnrichtingen', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\District09\DeLijnCoreAPI\Model\Lijnrichtingen';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\District09\DeLijnCoreAPI\Model\Lijnrichtingen',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation geefLijnrichtingenVoorHalteAsync
     *
     * geef de lijnrichtingen die de opgegeven halte bedienen
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  int $haltenummer Format - int32. nummer van de halte (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefLijnrichtingenVoorHalte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefLijnrichtingenVoorHalteAsync($entiteitnummer, $haltenummer, string $contentType = self::contentTypes['geefLijnrichtingenVoorHalte'][0])
    {
        return $this->geefLijnrichtingenVoorHalteAsyncWithHttpInfo($entiteitnummer, $haltenummer, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation geefLijnrichtingenVoorHalteAsyncWithHttpInfo
     *
     * geef de lijnrichtingen die de opgegeven halte bedienen
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  int $haltenummer Format - int32. nummer van de halte (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefLijnrichtingenVoorHalte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefLijnrichtingenVoorHalteAsyncWithHttpInfo($entiteitnummer, $haltenummer, string $contentType = self::contentTypes['geefLijnrichtingenVoorHalte'][0])
    {
        $returnType = '\District09\DeLijnCoreAPI\Model\Lijnrichtingen';
        $request = $this->geefLijnrichtingenVoorHalteRequest($entiteitnummer, $haltenummer, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'geefLijnrichtingenVoorHalte'
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  int $haltenummer Format - int32. nummer van de halte (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefLijnrichtingenVoorHalte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function geefLijnrichtingenVoorHalteRequest($entiteitnummer, $haltenummer, string $contentType = self::contentTypes['geefLijnrichtingenVoorHalte'][0])
    {

        // verify the required parameter 'entiteitnummer' is set
        if ($entiteitnummer === null || (is_array($entiteitnummer) && count($entiteitnummer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $entiteitnummer when calling geefLijnrichtingenVoorHalte'
            );
        }

        // verify the required parameter 'haltenummer' is set
        if ($haltenummer === null || (is_array($haltenummer) && count($haltenummer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $haltenummer when calling geefLijnrichtingenVoorHalte'
            );
        }


        $resourcePath = '/haltes/{entiteitnummer}/{haltenummer}/lijnrichtingen';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($entiteitnummer !== null) {
            $resourcePath = str_replace(
                '{' . 'entiteitnummer' . '}',
                ObjectSerializer::toPathValue($entiteitnummer),
                $resourcePath
            );
        }
        // path params
        if ($haltenummer !== null) {
            $resourcePath = str_replace(
                '{' . 'haltenummer' . '}',
                ObjectSerializer::toPathValue($haltenummer),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Ocp-Apim-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation geefOmleidingenVoorHalte
     *
     * geef de omleidingen voor de opgegeven halte
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  int $haltenummer Format - int32. nummer van de halte (required)
     * @param  string $datum datum in formaat yyyy-MM-dd met als default waarde de huidige datum (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefOmleidingenVoorHalte'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \District09\DeLijnCoreAPI\Model\Omleidingen
     */
    public function geefOmleidingenVoorHalte($entiteitnummer, $haltenummer, $datum = null, string $contentType = self::contentTypes['geefOmleidingenVoorHalte'][0])
    {
        list($response) = $this->geefOmleidingenVoorHalteWithHttpInfo($entiteitnummer, $haltenummer, $datum, $contentType);
        return $response;
    }

    /**
     * Operation geefOmleidingenVoorHalteWithHttpInfo
     *
     * geef de omleidingen voor de opgegeven halte
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  int $haltenummer Format - int32. nummer van de halte (required)
     * @param  string $datum datum in formaat yyyy-MM-dd met als default waarde de huidige datum (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefOmleidingenVoorHalte'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \District09\DeLijnCoreAPI\Model\Omleidingen, HTTP status code, HTTP response headers (array of strings)
     */
    public function geefOmleidingenVoorHalteWithHttpInfo($entiteitnummer, $haltenummer, $datum = null, string $contentType = self::contentTypes['geefOmleidingenVoorHalte'][0])
    {
        $request = $this->geefOmleidingenVoorHalteRequest($entiteitnummer, $haltenummer, $datum, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\District09\DeLijnCoreAPI\Model\Omleidingen' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\District09\DeLijnCoreAPI\Model\Omleidingen' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\District09\DeLijnCoreAPI\Model\Omleidingen', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\District09\DeLijnCoreAPI\Model\Omleidingen';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\District09\DeLijnCoreAPI\Model\Omleidingen',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation geefOmleidingenVoorHalteAsync
     *
     * geef de omleidingen voor de opgegeven halte
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  int $haltenummer Format - int32. nummer van de halte (required)
     * @param  string $datum datum in formaat yyyy-MM-dd met als default waarde de huidige datum (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefOmleidingenVoorHalte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefOmleidingenVoorHalteAsync($entiteitnummer, $haltenummer, $datum = null, string $contentType = self::contentTypes['geefOmleidingenVoorHalte'][0])
    {
        return $this->geefOmleidingenVoorHalteAsyncWithHttpInfo($entiteitnummer, $haltenummer, $datum, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation geefOmleidingenVoorHalteAsyncWithHttpInfo
     *
     * geef de omleidingen voor de opgegeven halte
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  int $haltenummer Format - int32. nummer van de halte (required)
     * @param  string $datum datum in formaat yyyy-MM-dd met als default waarde de huidige datum (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefOmleidingenVoorHalte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefOmleidingenVoorHalteAsyncWithHttpInfo($entiteitnummer, $haltenummer, $datum = null, string $contentType = self::contentTypes['geefOmleidingenVoorHalte'][0])
    {
        $returnType = '\District09\DeLijnCoreAPI\Model\Omleidingen';
        $request = $this->geefOmleidingenVoorHalteRequest($entiteitnummer, $haltenummer, $datum, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'geefOmleidingenVoorHalte'
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  int $haltenummer Format - int32. nummer van de halte (required)
     * @param  string $datum datum in formaat yyyy-MM-dd met als default waarde de huidige datum (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefOmleidingenVoorHalte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function geefOmleidingenVoorHalteRequest($entiteitnummer, $haltenummer, $datum = null, string $contentType = self::contentTypes['geefOmleidingenVoorHalte'][0])
    {

        // verify the required parameter 'entiteitnummer' is set
        if ($entiteitnummer === null || (is_array($entiteitnummer) && count($entiteitnummer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $entiteitnummer when calling geefOmleidingenVoorHalte'
            );
        }

        // verify the required parameter 'haltenummer' is set
        if ($haltenummer === null || (is_array($haltenummer) && count($haltenummer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $haltenummer when calling geefOmleidingenVoorHalte'
            );
        }



        $resourcePath = '/haltes/{entiteitnummer}/{haltenummer}/omleidingen';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datum,
            'datum', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($entiteitnummer !== null) {
            $resourcePath = str_replace(
                '{' . 'entiteitnummer' . '}',
                ObjectSerializer::toPathValue($entiteitnummer),
                $resourcePath
            );
        }
        // path params
        if ($haltenummer !== null) {
            $resourcePath = str_replace(
                '{' . 'haltenummer' . '}',
                ObjectSerializer::toPathValue($haltenummer),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Ocp-Apim-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation geefOmleidingenVoorHalteLijst
     *
     * geef de omleidingen voor de opgegeven halte sleutels
     *
     * @param  string $haltesleutels lijst van halte sleutels (bv 1_201302_5_5024541) (required)
     * @param  string $datum datum in formaat yyyy-MM-dd met als default waarde de huidige datum (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefOmleidingenVoorHalteLijst'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \District09\DeLijnCoreAPI\Model\HalteOmleidingenLijst
     */
    public function geefOmleidingenVoorHalteLijst($haltesleutels, $datum = null, string $contentType = self::contentTypes['geefOmleidingenVoorHalteLijst'][0])
    {
        list($response) = $this->geefOmleidingenVoorHalteLijstWithHttpInfo($haltesleutels, $datum, $contentType);
        return $response;
    }

    /**
     * Operation geefOmleidingenVoorHalteLijstWithHttpInfo
     *
     * geef de omleidingen voor de opgegeven halte sleutels
     *
     * @param  string $haltesleutels lijst van halte sleutels (bv 1_201302_5_5024541) (required)
     * @param  string $datum datum in formaat yyyy-MM-dd met als default waarde de huidige datum (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefOmleidingenVoorHalteLijst'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \District09\DeLijnCoreAPI\Model\HalteOmleidingenLijst, HTTP status code, HTTP response headers (array of strings)
     */
    public function geefOmleidingenVoorHalteLijstWithHttpInfo($haltesleutels, $datum = null, string $contentType = self::contentTypes['geefOmleidingenVoorHalteLijst'][0])
    {
        $request = $this->geefOmleidingenVoorHalteLijstRequest($haltesleutels, $datum, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\District09\DeLijnCoreAPI\Model\HalteOmleidingenLijst' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\District09\DeLijnCoreAPI\Model\HalteOmleidingenLijst' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\District09\DeLijnCoreAPI\Model\HalteOmleidingenLijst', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\District09\DeLijnCoreAPI\Model\HalteOmleidingenLijst';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\District09\DeLijnCoreAPI\Model\HalteOmleidingenLijst',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation geefOmleidingenVoorHalteLijstAsync
     *
     * geef de omleidingen voor de opgegeven halte sleutels
     *
     * @param  string $haltesleutels lijst van halte sleutels (bv 1_201302_5_5024541) (required)
     * @param  string $datum datum in formaat yyyy-MM-dd met als default waarde de huidige datum (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefOmleidingenVoorHalteLijst'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefOmleidingenVoorHalteLijstAsync($haltesleutels, $datum = null, string $contentType = self::contentTypes['geefOmleidingenVoorHalteLijst'][0])
    {
        return $this->geefOmleidingenVoorHalteLijstAsyncWithHttpInfo($haltesleutels, $datum, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation geefOmleidingenVoorHalteLijstAsyncWithHttpInfo
     *
     * geef de omleidingen voor de opgegeven halte sleutels
     *
     * @param  string $haltesleutels lijst van halte sleutels (bv 1_201302_5_5024541) (required)
     * @param  string $datum datum in formaat yyyy-MM-dd met als default waarde de huidige datum (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefOmleidingenVoorHalteLijst'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefOmleidingenVoorHalteLijstAsyncWithHttpInfo($haltesleutels, $datum = null, string $contentType = self::contentTypes['geefOmleidingenVoorHalteLijst'][0])
    {
        $returnType = '\District09\DeLijnCoreAPI\Model\HalteOmleidingenLijst';
        $request = $this->geefOmleidingenVoorHalteLijstRequest($haltesleutels, $datum, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'geefOmleidingenVoorHalteLijst'
     *
     * @param  string $haltesleutels lijst van halte sleutels (bv 1_201302_5_5024541) (required)
     * @param  string $datum datum in formaat yyyy-MM-dd met als default waarde de huidige datum (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefOmleidingenVoorHalteLijst'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function geefOmleidingenVoorHalteLijstRequest($haltesleutels, $datum = null, string $contentType = self::contentTypes['geefOmleidingenVoorHalteLijst'][0])
    {

        // verify the required parameter 'haltesleutels' is set
        if ($haltesleutels === null || (is_array($haltesleutels) && count($haltesleutels) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $haltesleutels when calling geefOmleidingenVoorHalteLijst'
            );
        }



        $resourcePath = '/haltes/lijst/{haltesleutels}/omleidingen';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datum,
            'datum', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($haltesleutels !== null) {
            $resourcePath = str_replace(
                '{' . 'haltesleutels' . '}',
                ObjectSerializer::toPathValue($haltesleutels),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Ocp-Apim-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation geefStoringenVoorHalte
     *
     * geef de storingen voor de opgegeven halte
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  int $haltenummer Format - int32. nummer van de halte (required)
     * @param  string $datum datum in formaat yyyy-MM-dd met als default waarde de huidige datum (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefStoringenVoorHalte'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \District09\DeLijnCoreAPI\Model\Omleidingen
     */
    public function geefStoringenVoorHalte($entiteitnummer, $haltenummer, $datum = null, string $contentType = self::contentTypes['geefStoringenVoorHalte'][0])
    {
        list($response) = $this->geefStoringenVoorHalteWithHttpInfo($entiteitnummer, $haltenummer, $datum, $contentType);
        return $response;
    }

    /**
     * Operation geefStoringenVoorHalteWithHttpInfo
     *
     * geef de storingen voor de opgegeven halte
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  int $haltenummer Format - int32. nummer van de halte (required)
     * @param  string $datum datum in formaat yyyy-MM-dd met als default waarde de huidige datum (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefStoringenVoorHalte'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \District09\DeLijnCoreAPI\Model\Omleidingen, HTTP status code, HTTP response headers (array of strings)
     */
    public function geefStoringenVoorHalteWithHttpInfo($entiteitnummer, $haltenummer, $datum = null, string $contentType = self::contentTypes['geefStoringenVoorHalte'][0])
    {
        $request = $this->geefStoringenVoorHalteRequest($entiteitnummer, $haltenummer, $datum, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\District09\DeLijnCoreAPI\Model\Omleidingen' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\District09\DeLijnCoreAPI\Model\Omleidingen' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\District09\DeLijnCoreAPI\Model\Omleidingen', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\District09\DeLijnCoreAPI\Model\Omleidingen';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\District09\DeLijnCoreAPI\Model\Omleidingen',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation geefStoringenVoorHalteAsync
     *
     * geef de storingen voor de opgegeven halte
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  int $haltenummer Format - int32. nummer van de halte (required)
     * @param  string $datum datum in formaat yyyy-MM-dd met als default waarde de huidige datum (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefStoringenVoorHalte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefStoringenVoorHalteAsync($entiteitnummer, $haltenummer, $datum = null, string $contentType = self::contentTypes['geefStoringenVoorHalte'][0])
    {
        return $this->geefStoringenVoorHalteAsyncWithHttpInfo($entiteitnummer, $haltenummer, $datum, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation geefStoringenVoorHalteAsyncWithHttpInfo
     *
     * geef de storingen voor de opgegeven halte
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  int $haltenummer Format - int32. nummer van de halte (required)
     * @param  string $datum datum in formaat yyyy-MM-dd met als default waarde de huidige datum (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefStoringenVoorHalte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefStoringenVoorHalteAsyncWithHttpInfo($entiteitnummer, $haltenummer, $datum = null, string $contentType = self::contentTypes['geefStoringenVoorHalte'][0])
    {
        $returnType = '\District09\DeLijnCoreAPI\Model\Omleidingen';
        $request = $this->geefStoringenVoorHalteRequest($entiteitnummer, $haltenummer, $datum, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'geefStoringenVoorHalte'
     *
     * @param  int $entiteitnummer Format - int32. nummer van de entiteit (required)
     * @param  int $haltenummer Format - int32. nummer van de halte (required)
     * @param  string $datum datum in formaat yyyy-MM-dd met als default waarde de huidige datum (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefStoringenVoorHalte'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function geefStoringenVoorHalteRequest($entiteitnummer, $haltenummer, $datum = null, string $contentType = self::contentTypes['geefStoringenVoorHalte'][0])
    {

        // verify the required parameter 'entiteitnummer' is set
        if ($entiteitnummer === null || (is_array($entiteitnummer) && count($entiteitnummer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $entiteitnummer when calling geefStoringenVoorHalte'
            );
        }

        // verify the required parameter 'haltenummer' is set
        if ($haltenummer === null || (is_array($haltenummer) && count($haltenummer) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $haltenummer when calling geefStoringenVoorHalte'
            );
        }



        $resourcePath = '/haltes/{entiteitnummer}/{haltenummer}/storingen';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datum,
            'datum', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($entiteitnummer !== null) {
            $resourcePath = str_replace(
                '{' . 'entiteitnummer' . '}',
                ObjectSerializer::toPathValue($entiteitnummer),
                $resourcePath
            );
        }
        // path params
        if ($haltenummer !== null) {
            $resourcePath = str_replace(
                '{' . 'haltenummer' . '}',
                ObjectSerializer::toPathValue($haltenummer),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Ocp-Apim-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation geefStoringenVoorHalteLijst
     *
     * geef de storingen de opgegeven halte sleutels
     *
     * @param  string $haltesleutels lijst van halte sleutels (bv 1_201302_5_5024541) (required)
     * @param  string $datum datum in formaat yyyy-MM-dd met als default waarde de huidige datum (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefStoringenVoorHalteLijst'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \District09\DeLijnCoreAPI\Model\Omleidingen
     */
    public function geefStoringenVoorHalteLijst($haltesleutels, $datum = null, string $contentType = self::contentTypes['geefStoringenVoorHalteLijst'][0])
    {
        list($response) = $this->geefStoringenVoorHalteLijstWithHttpInfo($haltesleutels, $datum, $contentType);
        return $response;
    }

    /**
     * Operation geefStoringenVoorHalteLijstWithHttpInfo
     *
     * geef de storingen de opgegeven halte sleutels
     *
     * @param  string $haltesleutels lijst van halte sleutels (bv 1_201302_5_5024541) (required)
     * @param  string $datum datum in formaat yyyy-MM-dd met als default waarde de huidige datum (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefStoringenVoorHalteLijst'] to see the possible values for this operation
     *
     * @throws \District09\DeLijnCoreAPI\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \District09\DeLijnCoreAPI\Model\Omleidingen, HTTP status code, HTTP response headers (array of strings)
     */
    public function geefStoringenVoorHalteLijstWithHttpInfo($haltesleutels, $datum = null, string $contentType = self::contentTypes['geefStoringenVoorHalteLijst'][0])
    {
        $request = $this->geefStoringenVoorHalteLijstRequest($haltesleutels, $datum, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\District09\DeLijnCoreAPI\Model\Omleidingen' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\District09\DeLijnCoreAPI\Model\Omleidingen' !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\District09\DeLijnCoreAPI\Model\Omleidingen', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\District09\DeLijnCoreAPI\Model\Omleidingen';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\District09\DeLijnCoreAPI\Model\Omleidingen',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation geefStoringenVoorHalteLijstAsync
     *
     * geef de storingen de opgegeven halte sleutels
     *
     * @param  string $haltesleutels lijst van halte sleutels (bv 1_201302_5_5024541) (required)
     * @param  string $datum datum in formaat yyyy-MM-dd met als default waarde de huidige datum (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefStoringenVoorHalteLijst'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefStoringenVoorHalteLijstAsync($haltesleutels, $datum = null, string $contentType = self::contentTypes['geefStoringenVoorHalteLijst'][0])
    {
        return $this->geefStoringenVoorHalteLijstAsyncWithHttpInfo($haltesleutels, $datum, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation geefStoringenVoorHalteLijstAsyncWithHttpInfo
     *
     * geef de storingen de opgegeven halte sleutels
     *
     * @param  string $haltesleutels lijst van halte sleutels (bv 1_201302_5_5024541) (required)
     * @param  string $datum datum in formaat yyyy-MM-dd met als default waarde de huidige datum (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefStoringenVoorHalteLijst'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function geefStoringenVoorHalteLijstAsyncWithHttpInfo($haltesleutels, $datum = null, string $contentType = self::contentTypes['geefStoringenVoorHalteLijst'][0])
    {
        $returnType = '\District09\DeLijnCoreAPI\Model\Omleidingen';
        $request = $this->geefStoringenVoorHalteLijstRequest($haltesleutels, $datum, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'geefStoringenVoorHalteLijst'
     *
     * @param  string $haltesleutels lijst van halte sleutels (bv 1_201302_5_5024541) (required)
     * @param  string $datum datum in formaat yyyy-MM-dd met als default waarde de huidige datum (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['geefStoringenVoorHalteLijst'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function geefStoringenVoorHalteLijstRequest($haltesleutels, $datum = null, string $contentType = self::contentTypes['geefStoringenVoorHalteLijst'][0])
    {

        // verify the required parameter 'haltesleutels' is set
        if ($haltesleutels === null || (is_array($haltesleutels) && count($haltesleutels) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $haltesleutels when calling geefStoringenVoorHalteLijst'
            );
        }



        $resourcePath = '/haltes/lijst/{haltesleutels}/storingen';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $datum,
            'datum', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($haltesleutels !== null) {
            $resourcePath = str_replace(
                '{' . 'haltesleutels' . '}',
                ObjectSerializer::toPathValue($haltesleutels),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json;charset=UTF-8', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('subscription-key');
        if ($apiKey !== null) {
            $queryParams['subscription-key'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Ocp-Apim-Subscription-Key');
        if ($apiKey !== null) {
            $headers['Ocp-Apim-Subscription-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
