<?php
/**
 * Doorkomst
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  District09\DeLijnCoreAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * De Lijn Kern Open Data Services (v1)
 *
 * Dit document beschrijft de kern operaties van de Open Data API (v1)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace District09\DeLijnCoreAPI\Model;

use \ArrayAccess;
use \District09\DeLijnCoreAPI\ObjectSerializer;

/**
 * Doorkomst Class Doc Comment
 *
 * @category Class
 * @package  District09\DeLijnCoreAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Doorkomst implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Doorkomst';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'entiteitnummer' => 'string',
        'lijnnummer' => 'int',
        'richting' => 'string',
        'ritnummer' => 'string',
        'bestemming' => 'string',
        'vias' => 'string[]',
        'haltenummer' => 'string',
        'dienstregeling_tijdstip' => '\DateTime',
        'real_time_tijdstip' => '\DateTime',
        'vrtnum' => 'string',
        'prediction_statussen' => 'string[]',
        'links' => '\District09\DeLijnCoreAPI\Model\Link[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'entiteitnummer' => null,
        'lijnnummer' => 'int32',
        'richting' => null,
        'ritnummer' => null,
        'bestemming' => null,
        'vias' => null,
        'haltenummer' => null,
        'dienstregeling_tijdstip' => 'date-time',
        'real_time_tijdstip' => 'date-time',
        'vrtnum' => null,
        'prediction_statussen' => null,
        'links' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'entiteitnummer' => false,
		'lijnnummer' => false,
		'richting' => false,
		'ritnummer' => false,
		'bestemming' => false,
		'vias' => false,
		'haltenummer' => false,
		'dienstregeling_tijdstip' => false,
		'real_time_tijdstip' => false,
		'vrtnum' => false,
		'prediction_statussen' => false,
		'links' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'entiteitnummer' => 'entiteitnummer',
        'lijnnummer' => 'lijnnummer',
        'richting' => 'richting',
        'ritnummer' => 'ritnummer',
        'bestemming' => 'bestemming',
        'vias' => 'vias',
        'haltenummer' => 'haltenummer',
        'dienstregeling_tijdstip' => 'dienstregelingTijdstip',
        'real_time_tijdstip' => 'real-timeTijdstip',
        'vrtnum' => 'vrtnum',
        'prediction_statussen' => 'predictionStatussen',
        'links' => 'links'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'entiteitnummer' => 'setEntiteitnummer',
        'lijnnummer' => 'setLijnnummer',
        'richting' => 'setRichting',
        'ritnummer' => 'setRitnummer',
        'bestemming' => 'setBestemming',
        'vias' => 'setVias',
        'haltenummer' => 'setHaltenummer',
        'dienstregeling_tijdstip' => 'setDienstregelingTijdstip',
        'real_time_tijdstip' => 'setRealTimeTijdstip',
        'vrtnum' => 'setVrtnum',
        'prediction_statussen' => 'setPredictionStatussen',
        'links' => 'setLinks'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'entiteitnummer' => 'getEntiteitnummer',
        'lijnnummer' => 'getLijnnummer',
        'richting' => 'getRichting',
        'ritnummer' => 'getRitnummer',
        'bestemming' => 'getBestemming',
        'vias' => 'getVias',
        'haltenummer' => 'getHaltenummer',
        'dienstregeling_tijdstip' => 'getDienstregelingTijdstip',
        'real_time_tijdstip' => 'getRealTimeTijdstip',
        'vrtnum' => 'getVrtnum',
        'prediction_statussen' => 'getPredictionStatussen',
        'links' => 'getLinks'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const RICHTING_HEEN = 'HEEN';
    public const RICHTING_TERUG = 'TERUG';
    public const PREDICTION_STATUSSEN_GESCHRAPT = 'GESCHRAPT';
    public const PREDICTION_STATUSSEN_VERSTREKEN = 'VERSTREKEN';
    public const PREDICTION_STATUSSEN_REALTIME = 'REALTIME';
    public const PREDICTION_STATUSSEN_GEENREALTIME = 'GEENREALTIME';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRichtingAllowableValues()
    {
        return [
            self::RICHTING_HEEN,
            self::RICHTING_TERUG,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPredictionStatussenAllowableValues()
    {
        return [
            self::PREDICTION_STATUSSEN_GESCHRAPT,
            self::PREDICTION_STATUSSEN_VERSTREKEN,
            self::PREDICTION_STATUSSEN_REALTIME,
            self::PREDICTION_STATUSSEN_GEENREALTIME,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('entiteitnummer', $data ?? [], null);
        $this->setIfExists('lijnnummer', $data ?? [], null);
        $this->setIfExists('richting', $data ?? [], null);
        $this->setIfExists('ritnummer', $data ?? [], null);
        $this->setIfExists('bestemming', $data ?? [], null);
        $this->setIfExists('vias', $data ?? [], null);
        $this->setIfExists('haltenummer', $data ?? [], null);
        $this->setIfExists('dienstregeling_tijdstip', $data ?? [], null);
        $this->setIfExists('real_time_tijdstip', $data ?? [], null);
        $this->setIfExists('vrtnum', $data ?? [], null);
        $this->setIfExists('prediction_statussen', $data ?? [], null);
        $this->setIfExists('links', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['entiteitnummer'] === null) {
            $invalidProperties[] = "'entiteitnummer' can't be null";
        }
        if ($this->container['lijnnummer'] === null) {
            $invalidProperties[] = "'lijnnummer' can't be null";
        }
        if ($this->container['richting'] === null) {
            $invalidProperties[] = "'richting' can't be null";
        }
        $allowedValues = $this->getRichtingAllowableValues();
        if (!is_null($this->container['richting']) && !in_array($this->container['richting'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'richting', must be one of '%s'",
                $this->container['richting'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['haltenummer'] === null) {
            $invalidProperties[] = "'haltenummer' can't be null";
        }
        if ($this->container['dienstregeling_tijdstip'] === null) {
            $invalidProperties[] = "'dienstregeling_tijdstip' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets entiteitnummer
     *
     * @return string
     */
    public function getEntiteitnummer()
    {
        return $this->container['entiteitnummer'];
    }

    /**
     * Sets entiteitnummer
     *
     * @param string $entiteitnummer entiteit nummer
     *
     * @return self
     */
    public function setEntiteitnummer($entiteitnummer)
    {
        if (is_null($entiteitnummer)) {
            throw new \InvalidArgumentException('non-nullable entiteitnummer cannot be null');
        }
        $this->container['entiteitnummer'] = $entiteitnummer;

        return $this;
    }

    /**
     * Gets lijnnummer
     *
     * @return int
     */
    public function getLijnnummer()
    {
        return $this->container['lijnnummer'];
    }

    /**
     * Sets lijnnummer
     *
     * @param int $lijnnummer lijn nummer
     *
     * @return self
     */
    public function setLijnnummer($lijnnummer)
    {
        if (is_null($lijnnummer)) {
            throw new \InvalidArgumentException('non-nullable lijnnummer cannot be null');
        }
        $this->container['lijnnummer'] = $lijnnummer;

        return $this;
    }

    /**
     * Gets richting
     *
     * @return string
     */
    public function getRichting()
    {
        return $this->container['richting'];
    }

    /**
     * Sets richting
     *
     * @param string $richting richting van de rit
     *
     * @return self
     */
    public function setRichting($richting)
    {
        if (is_null($richting)) {
            throw new \InvalidArgumentException('non-nullable richting cannot be null');
        }
        $allowedValues = $this->getRichtingAllowableValues();
        if (!in_array($richting, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'richting', must be one of '%s'",
                    $richting,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['richting'] = $richting;

        return $this;
    }

    /**
     * Gets ritnummer
     *
     * @return string|null
     */
    public function getRitnummer()
    {
        return $this->container['ritnummer'];
    }

    /**
     * Sets ritnummer
     *
     * @param string|null $ritnummer ritnummer
     *
     * @return self
     */
    public function setRitnummer($ritnummer)
    {
        if (is_null($ritnummer)) {
            throw new \InvalidArgumentException('non-nullable ritnummer cannot be null');
        }
        $this->container['ritnummer'] = $ritnummer;

        return $this;
    }

    /**
     * Gets bestemming
     *
     * @return string|null
     */
    public function getBestemming()
    {
        return $this->container['bestemming'];
    }

    /**
     * Sets bestemming
     *
     * @param string|null $bestemming afgekorte halte naam van de laatste halte van de rit
     *
     * @return self
     */
    public function setBestemming($bestemming)
    {
        if (is_null($bestemming)) {
            throw new \InvalidArgumentException('non-nullable bestemming cannot be null');
        }
        $this->container['bestemming'] = $bestemming;

        return $this;
    }

    /**
     * Gets vias
     *
     * @return string[]|null
     */
    public function getVias()
    {
        return $this->container['vias'];
    }

    /**
     * Sets vias
     *
     * @param string[]|null $vias lijst van plaatsen die deze rit bedient als afwijkend t.o.v. de reguliere ritten
     *
     * @return self
     */
    public function setVias($vias)
    {
        if (is_null($vias)) {
            throw new \InvalidArgumentException('non-nullable vias cannot be null');
        }
        $this->container['vias'] = $vias;

        return $this;
    }

    /**
     * Gets haltenummer
     *
     * @return string
     */
    public function getHaltenummer()
    {
        return $this->container['haltenummer'];
    }

    /**
     * Sets haltenummer
     *
     * @param string $haltenummer halte nummer (key waarde)
     *
     * @return self
     */
    public function setHaltenummer($haltenummer)
    {
        if (is_null($haltenummer)) {
            throw new \InvalidArgumentException('non-nullable haltenummer cannot be null');
        }
        $this->container['haltenummer'] = $haltenummer;

        return $this;
    }

    /**
     * Gets dienstregeling_tijdstip
     *
     * @return \DateTime
     */
    public function getDienstregelingTijdstip()
    {
        return $this->container['dienstregeling_tijdstip'];
    }

    /**
     * Sets dienstregeling_tijdstip
     *
     * @param \DateTime $dienstregeling_tijdstip doorkomsttijdstip volgens de dienstregeling van een rit aan de halte
     *
     * @return self
     */
    public function setDienstregelingTijdstip($dienstregeling_tijdstip)
    {
        if (is_null($dienstregeling_tijdstip)) {
            throw new \InvalidArgumentException('non-nullable dienstregeling_tijdstip cannot be null');
        }
        $this->container['dienstregeling_tijdstip'] = $dienstregeling_tijdstip;

        return $this;
    }

    /**
     * Gets real_time_tijdstip
     *
     * @return \DateTime|null
     */
    public function getRealTimeTijdstip()
    {
        return $this->container['real_time_tijdstip'];
    }

    /**
     * Sets real_time_tijdstip
     *
     * @param \DateTime|null $real_time_tijdstip real-time doorkomsttijdstip van een rit aan de halte
     *
     * @return self
     */
    public function setRealTimeTijdstip($real_time_tijdstip)
    {
        if (is_null($real_time_tijdstip)) {
            throw new \InvalidArgumentException('non-nullable real_time_tijdstip cannot be null');
        }
        $this->container['real_time_tijdstip'] = $real_time_tijdstip;

        return $this;
    }

    /**
     * Gets vrtnum
     *
     * @return string|null
     */
    public function getVrtnum()
    {
        return $this->container['vrtnum'];
    }

    /**
     * Sets vrtnum
     *
     * @param string|null $vrtnum nummer van het voertuig
     *
     * @return self
     */
    public function setVrtnum($vrtnum)
    {
        if (is_null($vrtnum)) {
            throw new \InvalidArgumentException('non-nullable vrtnum cannot be null');
        }
        $this->container['vrtnum'] = $vrtnum;

        return $this;
    }

    /**
     * Gets prediction_statussen
     *
     * @return string[]|null
     */
    public function getPredictionStatussen()
    {
        return $this->container['prediction_statussen'];
    }

    /**
     * Sets prediction_statussen
     *
     * @param string[]|null $prediction_statussen lijst van statussen van de meting van de realtime doorkomst
     *
     * @return self
     */
    public function setPredictionStatussen($prediction_statussen)
    {
        if (is_null($prediction_statussen)) {
            throw new \InvalidArgumentException('non-nullable prediction_statussen cannot be null');
        }
        $allowedValues = $this->getPredictionStatussenAllowableValues();
        if (array_diff($prediction_statussen, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'prediction_statussen', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['prediction_statussen'] = $prediction_statussen;

        return $this;
    }

    /**
     * Gets links
     *
     * @return \District09\DeLijnCoreAPI\Model\Link[]|null
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \District09\DeLijnCoreAPI\Model\Link[]|null $links links
     *
     * @return self
     */
    public function setLinks($links)
    {
        if (is_null($links)) {
            throw new \InvalidArgumentException('non-nullable links cannot be null');
        }
        $this->container['links'] = $links;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


