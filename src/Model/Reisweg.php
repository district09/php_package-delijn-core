<?php
/**
 * Reisweg
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  District09\DeLijnCoreAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * De Lijn Kern Open Data Services (v1)
 *
 * Dit document beschrijft de kern operaties van de Open Data API (v1)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace District09\DeLijnCoreAPI\Model;

use \ArrayAccess;
use \District09\DeLijnCoreAPI\ObjectSerializer;

/**
 * Reisweg Class Doc Comment
 *
 * @category Class
 * @package  District09\DeLijnCoreAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Reisweg implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Reisweg';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'bestpassend' => 'bool',
        'overstappen' => 'int',
        'duurtijd' => '\District09\DeLijnCoreAPI\Model\Duur',
        'reisweg_stappen' => '\District09\DeLijnCoreAPI\Model\ReiswegStap[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'bestpassend' => null,
        'overstappen' => 'int32',
        'duurtijd' => null,
        'reisweg_stappen' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'bestpassend' => false,
		'overstappen' => false,
		'duurtijd' => false,
		'reisweg_stappen' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'bestpassend' => 'bestpassend',
        'overstappen' => 'overstappen',
        'duurtijd' => 'duurtijd',
        'reisweg_stappen' => 'reiswegStappen'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'bestpassend' => 'setBestpassend',
        'overstappen' => 'setOverstappen',
        'duurtijd' => 'setDuurtijd',
        'reisweg_stappen' => 'setReiswegStappen'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'bestpassend' => 'getBestpassend',
        'overstappen' => 'getOverstappen',
        'duurtijd' => 'getDuurtijd',
        'reisweg_stappen' => 'getReiswegStappen'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const BESTPASSEND_TRUE = 'true';
    public const BESTPASSEND_FALSE = 'false';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBestpassendAllowableValues()
    {
        return [
            self::BESTPASSEND_TRUE,
            self::BESTPASSEND_FALSE,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('bestpassend', $data ?? [], null);
        $this->setIfExists('overstappen', $data ?? [], null);
        $this->setIfExists('duurtijd', $data ?? [], null);
        $this->setIfExists('reisweg_stappen', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getBestpassendAllowableValues();
        if (!is_null($this->container['bestpassend']) && !in_array($this->container['bestpassend'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'bestpassend', must be one of '%s'",
                $this->container['bestpassend'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets bestpassend
     *
     * @return bool|null
     */
    public function getBestpassend()
    {
        return $this->container['bestpassend'];
    }

    /**
     * Sets bestpassend
     *
     * @param bool|null $bestpassend geeft aan of de reisweg het best beantwoordt aan het gevraagde routeplan
     *
     * @return self
     */
    public function setBestpassend($bestpassend)
    {
        if (is_null($bestpassend)) {
            throw new \InvalidArgumentException('non-nullable bestpassend cannot be null');
        }
        $allowedValues = $this->getBestpassendAllowableValues();
        if (!in_array($bestpassend, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'bestpassend', must be one of '%s'",
                    $bestpassend,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['bestpassend'] = $bestpassend;

        return $this;
    }

    /**
     * Gets overstappen
     *
     * @return int|null
     */
    public function getOverstappen()
    {
        return $this->container['overstappen'];
    }

    /**
     * Sets overstappen
     *
     * @param int|null $overstappen geeft het aantal overstappen van deze reisweg gebaseerd op de reiswegstappen
     *
     * @return self
     */
    public function setOverstappen($overstappen)
    {
        if (is_null($overstappen)) {
            throw new \InvalidArgumentException('non-nullable overstappen cannot be null');
        }
        $this->container['overstappen'] = $overstappen;

        return $this;
    }

    /**
     * Gets duurtijd
     *
     * @return \District09\DeLijnCoreAPI\Model\Duur|null
     */
    public function getDuurtijd()
    {
        return $this->container['duurtijd'];
    }

    /**
     * Sets duurtijd
     *
     * @param \District09\DeLijnCoreAPI\Model\Duur|null $duurtijd duurtijd
     *
     * @return self
     */
    public function setDuurtijd($duurtijd)
    {
        if (is_null($duurtijd)) {
            throw new \InvalidArgumentException('non-nullable duurtijd cannot be null');
        }
        $this->container['duurtijd'] = $duurtijd;

        return $this;
    }

    /**
     * Gets reisweg_stappen
     *
     * @return \District09\DeLijnCoreAPI\Model\ReiswegStap[]|null
     */
    public function getReiswegStappen()
    {
        return $this->container['reisweg_stappen'];
    }

    /**
     * Sets reisweg_stappen
     *
     * @param \District09\DeLijnCoreAPI\Model\ReiswegStap[]|null $reisweg_stappen lijst van reiswegstappen van een reisweg
     *
     * @return self
     */
    public function setReiswegStappen($reisweg_stappen)
    {
        if (is_null($reisweg_stappen)) {
            throw new \InvalidArgumentException('non-nullable reisweg_stappen cannot be null');
        }
        $this->container['reisweg_stappen'] = $reisweg_stappen;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


