<?php
/**
 * Halte
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  District09\DeLijnCoreAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * De Lijn Kern Open Data Services (v1)
 *
 * Dit document beschrijft de kern operaties van de Open Data API (v1)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace District09\DeLijnCoreAPI\Model;

use \ArrayAccess;
use \District09\DeLijnCoreAPI\ObjectSerializer;

/**
 * Halte Class Doc Comment
 *
 * @category Class
 * @package  District09\DeLijnCoreAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Halte implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Halte';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'entiteitnummer' => 'string',
        'haltenummer' => 'string',
        'omschrijving' => 'string',
        'gemeentenummer' => 'int',
        'omschrijving_gemeente' => 'string',
        'district_code' => 'string',
        'geo_coordinaat' => '\District09\DeLijnCoreAPI\Model\GeoCoordinaat',
        'halte_toegankelijkheden' => 'string[]',
        'hoofd_halte' => 'bool',
        'taal' => 'string',
        'links' => '\District09\DeLijnCoreAPI\Model\Link[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'entiteitnummer' => null,
        'haltenummer' => null,
        'omschrijving' => null,
        'gemeentenummer' => 'int32',
        'omschrijving_gemeente' => null,
        'district_code' => null,
        'geo_coordinaat' => null,
        'halte_toegankelijkheden' => null,
        'hoofd_halte' => null,
        'taal' => null,
        'links' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'entiteitnummer' => false,
		'haltenummer' => false,
		'omschrijving' => false,
		'gemeentenummer' => false,
		'omschrijving_gemeente' => false,
		'district_code' => false,
		'geo_coordinaat' => false,
		'halte_toegankelijkheden' => false,
		'hoofd_halte' => false,
		'taal' => false,
		'links' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'entiteitnummer' => 'entiteitnummer',
        'haltenummer' => 'haltenummer',
        'omschrijving' => 'omschrijving',
        'gemeentenummer' => 'gemeentenummer',
        'omschrijving_gemeente' => 'omschrijvingGemeente',
        'district_code' => 'districtCode',
        'geo_coordinaat' => 'geoCoordinaat',
        'halte_toegankelijkheden' => 'halteToegankelijkheden',
        'hoofd_halte' => 'hoofdHalte',
        'taal' => 'taal',
        'links' => 'links'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'entiteitnummer' => 'setEntiteitnummer',
        'haltenummer' => 'setHaltenummer',
        'omschrijving' => 'setOmschrijving',
        'gemeentenummer' => 'setGemeentenummer',
        'omschrijving_gemeente' => 'setOmschrijvingGemeente',
        'district_code' => 'setDistrictCode',
        'geo_coordinaat' => 'setGeoCoordinaat',
        'halte_toegankelijkheden' => 'setHalteToegankelijkheden',
        'hoofd_halte' => 'setHoofdHalte',
        'taal' => 'setTaal',
        'links' => 'setLinks'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'entiteitnummer' => 'getEntiteitnummer',
        'haltenummer' => 'getHaltenummer',
        'omschrijving' => 'getOmschrijving',
        'gemeentenummer' => 'getGemeentenummer',
        'omschrijving_gemeente' => 'getOmschrijvingGemeente',
        'district_code' => 'getDistrictCode',
        'geo_coordinaat' => 'getGeoCoordinaat',
        'halte_toegankelijkheden' => 'getHalteToegankelijkheden',
        'hoofd_halte' => 'getHoofdHalte',
        'taal' => 'getTaal',
        'links' => 'getLinks'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const HALTE_TOEGANKELIJKHEDEN_MOTORISCHE_BEPERKING = 'MOTORISCHE_BEPERKING';
    public const HALTE_TOEGANKELIJKHEDEN_MOTORISCH_MET_ASSIST = 'MOTORISCH_MET_ASSIST';
    public const HALTE_TOEGANKELIJKHEDEN_VISUELE_BEPERKING = 'VISUELE_BEPERKING';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getHalteToegankelijkhedenAllowableValues()
    {
        return [
            self::HALTE_TOEGANKELIJKHEDEN_MOTORISCHE_BEPERKING,
            self::HALTE_TOEGANKELIJKHEDEN_MOTORISCH_MET_ASSIST,
            self::HALTE_TOEGANKELIJKHEDEN_VISUELE_BEPERKING,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('entiteitnummer', $data ?? [], null);
        $this->setIfExists('haltenummer', $data ?? [], null);
        $this->setIfExists('omschrijving', $data ?? [], null);
        $this->setIfExists('gemeentenummer', $data ?? [], null);
        $this->setIfExists('omschrijving_gemeente', $data ?? [], null);
        $this->setIfExists('district_code', $data ?? [], null);
        $this->setIfExists('geo_coordinaat', $data ?? [], null);
        $this->setIfExists('halte_toegankelijkheden', $data ?? [], null);
        $this->setIfExists('hoofd_halte', $data ?? [], null);
        $this->setIfExists('taal', $data ?? [], null);
        $this->setIfExists('links', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['entiteitnummer'] === null) {
            $invalidProperties[] = "'entiteitnummer' can't be null";
        }
        if ($this->container['haltenummer'] === null) {
            $invalidProperties[] = "'haltenummer' can't be null";
        }
        if ($this->container['omschrijving'] === null) {
            $invalidProperties[] = "'omschrijving' can't be null";
        }
        if ($this->container['district_code'] === null) {
            $invalidProperties[] = "'district_code' can't be null";
        }
        if ($this->container['taal'] === null) {
            $invalidProperties[] = "'taal' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets entiteitnummer
     *
     * @return string
     */
    public function getEntiteitnummer()
    {
        return $this->container['entiteitnummer'];
    }

    /**
     * Sets entiteitnummer
     *
     * @param string $entiteitnummer nummer entiteit (key waarde)
     *
     * @return self
     */
    public function setEntiteitnummer($entiteitnummer)
    {
        if (is_null($entiteitnummer)) {
            throw new \InvalidArgumentException('non-nullable entiteitnummer cannot be null');
        }
        $this->container['entiteitnummer'] = $entiteitnummer;

        return $this;
    }

    /**
     * Gets haltenummer
     *
     * @return string
     */
    public function getHaltenummer()
    {
        return $this->container['haltenummer'];
    }

    /**
     * Sets haltenummer
     *
     * @param string $haltenummer halte nummer (key waarde)
     *
     * @return self
     */
    public function setHaltenummer($haltenummer)
    {
        if (is_null($haltenummer)) {
            throw new \InvalidArgumentException('non-nullable haltenummer cannot be null');
        }
        $this->container['haltenummer'] = $haltenummer;

        return $this;
    }

    /**
     * Gets omschrijving
     *
     * @return string
     */
    public function getOmschrijving()
    {
        return $this->container['omschrijving'];
    }

    /**
     * Sets omschrijving
     *
     * @param string $omschrijving omschrijving van de halte
     *
     * @return self
     */
    public function setOmschrijving($omschrijving)
    {
        if (is_null($omschrijving)) {
            throw new \InvalidArgumentException('non-nullable omschrijving cannot be null');
        }
        $this->container['omschrijving'] = $omschrijving;

        return $this;
    }

    /**
     * Gets gemeentenummer
     *
     * @return int|null
     */
    public function getGemeentenummer()
    {
        return $this->container['gemeentenummer'];
    }

    /**
     * Sets gemeentenummer
     *
     * @param int|null $gemeentenummer nummer gemeente (key waarde)
     *
     * @return self
     */
    public function setGemeentenummer($gemeentenummer)
    {
        if (is_null($gemeentenummer)) {
            throw new \InvalidArgumentException('non-nullable gemeentenummer cannot be null');
        }
        $this->container['gemeentenummer'] = $gemeentenummer;

        return $this;
    }

    /**
     * Gets omschrijving_gemeente
     *
     * @return string|null
     */
    public function getOmschrijvingGemeente()
    {
        return $this->container['omschrijving_gemeente'];
    }

    /**
     * Sets omschrijving_gemeente
     *
     * @param string|null $omschrijving_gemeente naam van de gemeente waar de halte zich bevindt
     *
     * @return self
     */
    public function setOmschrijvingGemeente($omschrijving_gemeente)
    {
        if (is_null($omschrijving_gemeente)) {
            throw new \InvalidArgumentException('non-nullable omschrijving_gemeente cannot be null');
        }
        $this->container['omschrijving_gemeente'] = $omschrijving_gemeente;

        return $this;
    }

    /**
     * Gets district_code
     *
     * @return string
     */
    public function getDistrictCode()
    {
        return $this->container['district_code'];
    }

    /**
     * Sets district_code
     *
     * @param string $district_code districtcode van het district waar de halte zich bevindt
     *
     * @return self
     */
    public function setDistrictCode($district_code)
    {
        if (is_null($district_code)) {
            throw new \InvalidArgumentException('non-nullable district_code cannot be null');
        }
        $this->container['district_code'] = $district_code;

        return $this;
    }

    /**
     * Gets geo_coordinaat
     *
     * @return \District09\DeLijnCoreAPI\Model\GeoCoordinaat|null
     */
    public function getGeoCoordinaat()
    {
        return $this->container['geo_coordinaat'];
    }

    /**
     * Sets geo_coordinaat
     *
     * @param \District09\DeLijnCoreAPI\Model\GeoCoordinaat|null $geo_coordinaat geo_coordinaat
     *
     * @return self
     */
    public function setGeoCoordinaat($geo_coordinaat)
    {
        if (is_null($geo_coordinaat)) {
            throw new \InvalidArgumentException('non-nullable geo_coordinaat cannot be null');
        }
        $this->container['geo_coordinaat'] = $geo_coordinaat;

        return $this;
    }

    /**
     * Gets halte_toegankelijkheden
     *
     * @return string[]|null
     */
    public function getHalteToegankelijkheden()
    {
        return $this->container['halte_toegankelijkheden'];
    }

    /**
     * Sets halte_toegankelijkheden
     *
     * @param string[]|null $halte_toegankelijkheden omschrijving van de toegankelijkheid van een halte
     *
     * @return self
     */
    public function setHalteToegankelijkheden($halte_toegankelijkheden)
    {
        if (is_null($halte_toegankelijkheden)) {
            throw new \InvalidArgumentException('non-nullable halte_toegankelijkheden cannot be null');
        }
        $allowedValues = $this->getHalteToegankelijkhedenAllowableValues();
        if (array_diff($halte_toegankelijkheden, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'halte_toegankelijkheden', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['halte_toegankelijkheden'] = $halte_toegankelijkheden;

        return $this;
    }

    /**
     * Gets hoofd_halte
     *
     * @return bool|null
     */
    public function getHoofdHalte()
    {
        return $this->container['hoofd_halte'];
    }

    /**
     * Sets hoofd_halte
     *
     * @param bool|null $hoofd_halte is de halte een hoofdhalte (attribuut voor toekomstig gebruik, geeft momenteel null als waarde)
     *
     * @return self
     */
    public function setHoofdHalte($hoofd_halte)
    {
        if (is_null($hoofd_halte)) {
            throw new \InvalidArgumentException('non-nullable hoofd_halte cannot be null');
        }
        $this->container['hoofd_halte'] = $hoofd_halte;

        return $this;
    }

    /**
     * Gets taal
     *
     * @return string
     */
    public function getTaal()
    {
        return $this->container['taal'];
    }

    /**
     * Sets taal
     *
     * @param string $taal de taal waarin de berichten voor de halte worden weergegeven
     *
     * @return self
     */
    public function setTaal($taal)
    {
        if (is_null($taal)) {
            throw new \InvalidArgumentException('non-nullable taal cannot be null');
        }
        $this->container['taal'] = $taal;

        return $this;
    }

    /**
     * Gets links
     *
     * @return \District09\DeLijnCoreAPI\Model\Link[]|null
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param \District09\DeLijnCoreAPI\Model\Link[]|null $links links
     *
     * @return self
     */
    public function setLinks($links)
    {
        if (is_null($links)) {
            throw new \InvalidArgumentException('non-nullable links cannot be null');
        }
        $this->container['links'] = $links;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


