<?php
/**
 * VoertuigReiswegStap
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  District09\DeLijnCoreAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * De Lijn Kern Open Data Services (v1)
 *
 * Dit document beschrijft de kern operaties van de Open Data API (v1)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 6.5.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace District09\DeLijnCoreAPI\Model;
use \District09\DeLijnCoreAPI\ObjectSerializer;

/**
 * VoertuigReiswegStap Class Doc Comment
 *
 * @category Class
 * @package  District09\DeLijnCoreAPI
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class VoertuigReiswegStap extends ReiswegStap
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'VoertuigReiswegStap';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'lijn_type' => 'string',
        'maatschappij_type' => 'string',
        'ritnummer' => 'string',
        'lijnrichting' => '\District09\DeLijnCoreAPI\Model\Lijnrichting',
        'afstand' => 'int',
        'geo_coordinaten' => '\District09\DeLijnCoreAPI\Model\GeoCoordinaat[]',
        'omleidingen' => '\District09\DeLijnCoreAPI\Model\Omleiding'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'lijn_type' => null,
        'maatschappij_type' => null,
        'ritnummer' => null,
        'lijnrichting' => null,
        'afstand' => 'int32',
        'geo_coordinaten' => null,
        'omleidingen' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'lijn_type' => false,
		'maatschappij_type' => false,
		'ritnummer' => false,
		'lijnrichting' => false,
		'afstand' => false,
		'geo_coordinaten' => false,
		'omleidingen' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes + parent::openAPITypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats + parent::openAPIFormats();
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables + parent::openAPINullables();
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'lijn_type' => 'lijnType',
        'maatschappij_type' => 'maatschappijType',
        'ritnummer' => 'ritnummer',
        'lijnrichting' => 'lijnrichting',
        'afstand' => 'afstand',
        'geo_coordinaten' => 'geoCoordinaten',
        'omleidingen' => 'omleidingen'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'lijn_type' => 'setLijnType',
        'maatschappij_type' => 'setMaatschappijType',
        'ritnummer' => 'setRitnummer',
        'lijnrichting' => 'setLijnrichting',
        'afstand' => 'setAfstand',
        'geo_coordinaten' => 'setGeoCoordinaten',
        'omleidingen' => 'setOmleidingen'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'lijn_type' => 'getLijnType',
        'maatschappij_type' => 'getMaatschappijType',
        'ritnummer' => 'getRitnummer',
        'lijnrichting' => 'getLijnrichting',
        'afstand' => 'getAfstand',
        'geo_coordinaten' => 'getGeoCoordinaten',
        'omleidingen' => 'getOmleidingen'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const LIJN_TYPE_VOERTUIG = 'VOERTUIG';
    public const LIJN_TYPE_WACHTEN = 'WACHTEN';
    public const LIJN_TYPE_WANDELEN = 'WANDELEN';
    public const MAATSCHAPPIJ_TYPE_DE_LIJN = 'DE_LIJN';
    public const MAATSCHAPPIJ_TYPE_NMBS = 'NMBS';
    public const MAATSCHAPPIJ_TYPE_MIVB = 'MIVB';
    public const MAATSCHAPPIJ_TYPE_TEC = 'TEC';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLijnTypeAllowableValues()
    {
        return [
            self::LIJN_TYPE_VOERTUIG,
            self::LIJN_TYPE_WACHTEN,
            self::LIJN_TYPE_WANDELEN,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMaatschappijTypeAllowableValues()
    {
        return [
            self::MAATSCHAPPIJ_TYPE_DE_LIJN,
            self::MAATSCHAPPIJ_TYPE_NMBS,
            self::MAATSCHAPPIJ_TYPE_MIVB,
            self::MAATSCHAPPIJ_TYPE_TEC,
        ];
    }


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->setIfExists('lijn_type', $data ?? [], null);
        $this->setIfExists('maatschappij_type', $data ?? [], null);
        $this->setIfExists('ritnummer', $data ?? [], null);
        $this->setIfExists('lijnrichting', $data ?? [], null);
        $this->setIfExists('afstand', $data ?? [], null);
        $this->setIfExists('geo_coordinaten', $data ?? [], null);
        $this->setIfExists('omleidingen', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        $allowedValues = $this->getLijnTypeAllowableValues();
        if (!is_null($this->container['lijn_type']) && !in_array($this->container['lijn_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'lijn_type', must be one of '%s'",
                $this->container['lijn_type'],
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getMaatschappijTypeAllowableValues();
        if (!is_null($this->container['maatschappij_type']) && !in_array($this->container['maatschappij_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'maatschappij_type', must be one of '%s'",
                $this->container['maatschappij_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets lijn_type
     *
     * @return string|null
     */
    public function getLijnType()
    {
        return $this->container['lijn_type'];
    }

    /**
     * Sets lijn_type
     *
     * @param string|null $lijn_type geeft het type reiswegstap
     *
     * @return self
     */
    public function setLijnType($lijn_type)
    {
        if (is_null($lijn_type)) {
            throw new \InvalidArgumentException('non-nullable lijn_type cannot be null');
        }
        $allowedValues = $this->getLijnTypeAllowableValues();
        if (!in_array($lijn_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'lijn_type', must be one of '%s'",
                    $lijn_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['lijn_type'] = $lijn_type;

        return $this;
    }

    /**
     * Gets maatschappij_type
     *
     * @return string|null
     */
    public function getMaatschappijType()
    {
        return $this->container['maatschappij_type'];
    }

    /**
     * Sets maatschappij_type
     *
     * @param string|null $maatschappij_type geeft de maatschappij die de reiswegstap uitvoert
     *
     * @return self
     */
    public function setMaatschappijType($maatschappij_type)
    {
        if (is_null($maatschappij_type)) {
            throw new \InvalidArgumentException('non-nullable maatschappij_type cannot be null');
        }
        $allowedValues = $this->getMaatschappijTypeAllowableValues();
        if (!in_array($maatschappij_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'maatschappij_type', must be one of '%s'",
                    $maatschappij_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['maatschappij_type'] = $maatschappij_type;

        return $this;
    }

    /**
     * Gets ritnummer
     *
     * @return string|null
     */
    public function getRitnummer()
    {
        return $this->container['ritnummer'];
    }

    /**
     * Sets ritnummer
     *
     * @param string|null $ritnummer ritnummer
     *
     * @return self
     */
    public function setRitnummer($ritnummer)
    {
        if (is_null($ritnummer)) {
            throw new \InvalidArgumentException('non-nullable ritnummer cannot be null');
        }
        $this->container['ritnummer'] = $ritnummer;

        return $this;
    }

    /**
     * Gets lijnrichting
     *
     * @return \District09\DeLijnCoreAPI\Model\Lijnrichting|null
     */
    public function getLijnrichting()
    {
        return $this->container['lijnrichting'];
    }

    /**
     * Sets lijnrichting
     *
     * @param \District09\DeLijnCoreAPI\Model\Lijnrichting|null $lijnrichting lijnrichting
     *
     * @return self
     */
    public function setLijnrichting($lijnrichting)
    {
        if (is_null($lijnrichting)) {
            throw new \InvalidArgumentException('non-nullable lijnrichting cannot be null');
        }
        $this->container['lijnrichting'] = $lijnrichting;

        return $this;
    }

    /**
     * Gets afstand
     *
     * @return int|null
     */
    public function getAfstand()
    {
        return $this->container['afstand'];
    }

    /**
     * Sets afstand
     *
     * @param int|null $afstand geeft afstand tussen het vertrekpunt en aankomst weer in meters
     *
     * @return self
     */
    public function setAfstand($afstand)
    {
        if (is_null($afstand)) {
            throw new \InvalidArgumentException('non-nullable afstand cannot be null');
        }
        $this->container['afstand'] = $afstand;

        return $this;
    }

    /**
     * Gets geo_coordinaten
     *
     * @return \District09\DeLijnCoreAPI\Model\GeoCoordinaat[]|null
     */
    public function getGeoCoordinaten()
    {
        return $this->container['geo_coordinaten'];
    }

    /**
     * Sets geo_coordinaten
     *
     * @param \District09\DeLijnCoreAPI\Model\GeoCoordinaat[]|null $geo_coordinaten geeft een lijst van coordinaten voor het traject van de reiswegstap
     *
     * @return self
     */
    public function setGeoCoordinaten($geo_coordinaten)
    {
        if (is_null($geo_coordinaten)) {
            throw new \InvalidArgumentException('non-nullable geo_coordinaten cannot be null');
        }
        $this->container['geo_coordinaten'] = $geo_coordinaten;

        return $this;
    }

    /**
     * Gets omleidingen
     *
     * @return \District09\DeLijnCoreAPI\Model\Omleiding|null
     */
    public function getOmleidingen()
    {
        return $this->container['omleidingen'];
    }

    /**
     * Sets omleidingen
     *
     * @param \District09\DeLijnCoreAPI\Model\Omleiding|null $omleidingen omleidingen
     *
     * @return self
     */
    public function setOmleidingen($omleidingen)
    {
        if (is_null($omleidingen)) {
            throw new \InvalidArgumentException('non-nullable omleidingen cannot be null');
        }
        $this->container['omleidingen'] = $omleidingen;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


